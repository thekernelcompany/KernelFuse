op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 256})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (256, 768)
op0.sizes = ([4, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op0_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 256})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (256, 768)
op1.sizes = ([4, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op1_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 196608})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152}),
        MemoryDep('arg3_1', c1, {c0: 256, c1: 768})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (196608, 1)
op3.sizes = ([4, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf3_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op3_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    index5 = p2
    index6 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg3_1', get_index_7)
        mul_1 = ops.mul(mul, load_5)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf3', get_index_8, to_dtype, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1769472})]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg4_1', c0, {c0: 1769472})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1769472, 1)
op4.sizes = ([1769472], [])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf4_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op4_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, to_dtype, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf4', mode=None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: ExternKernelSchedulerNode(FallbackKernel)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: FallbackKernel
    buf6.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op7: ExternKernelSchedulerNode(MultiOutput)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: MultiOutput
    buf7.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = None


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 589824})]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('arg5_1', c0, {c0: 589824})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (589824, 1)
op12.sizes = ([589824], [])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf12_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op12_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf12', get_index_1, to_dtype, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf7', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
    ]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 256})]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 196608})]
op14.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152})]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf14.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (256, 768)
op14.sizes = ([4, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op14_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    index5 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf13', get_index_5)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_6 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf14', get_index_6, getitem)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 256})]
op15.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 196608})]
op15.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152})]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf15.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (256, 768)
op15.sizes = ([4, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op15_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    index5 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf13', get_index_5)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_6 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf15', get_index_6, getitem_1)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 196608})]
op17.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 196608}),
        MemoryDep('buf14', c0, {c0: 256}),
        MemoryDep('buf15', c0, {c0: 256})]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152}),
        MemoryDep('arg6_1', c1, {c0: 256, c1: 768})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (196608, 1)
op17.sizes = ([4, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op17_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    index5 = 49152*p0 + 768*p1 + p2
    index6 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf13', get_index_5)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf14', get_index_6)
        sub = ops.sub(add_1, load_4)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('buf15', get_index_7)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_8 = self.get_index('index6')
        load_6 = ops.load('arg6_1', get_index_8)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index5')
        store = ops.store('buf17', get_index_9, to_dtype_1, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 2359296})]
op18.unmet_dependencies = []
op18.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 2359296})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (2359296, 1)
op18.sizes = ([2359296], [])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf18_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op18_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf18', get_index_1, to_dtype, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf18', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 786432})]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 786432})]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (786432, 1)
op20.sizes = ([786432], [])
buf19_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf20_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op20_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf20', get_index_2, to_dtype_2, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 2359296})]
op21.unmet_dependencies = []
op21.met_dependencies = [MemoryDep('arg8_1', c0, {c0: 2359296})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2359296, 1)
op21.sizes = ([2359296], [])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf21_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op21_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg8_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf21', get_index_1, to_dtype, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf21', mode=None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 196608})]
op23.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 196608}), MemoryDep('buf22', c0, {c0: 196608})]
op23.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 256, c1: 768}),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 49152})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (196608, 1)
op23.sizes = ([4, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf22_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op23_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 64
    index4 = 768*p1 + p2
    index5 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf13', get_index_5)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_6 = self.get_index('index5')
        load_4 = ops.load('buf22', get_index_6)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_1)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf23', get_index_7, add_2, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 256})]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 196608})]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (256, 768)
op24.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op24_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 256})]
op25.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 196608})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (256, 768)
op25.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op25_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 196608})]
op27.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf24', c0, {c0: 256}),
        MemoryDep('buf25', c0, {c0: 256})]
op27.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 256, c1: 768})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (196608, 1)
op27.sizes = ([256, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg9_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op27_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf25', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf27', get_index_4, to_dtype, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1769472})]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('arg10_1', c0, {c0: 1769472})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1769472, 1)
op28.sizes = ([1769472], [])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf28_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op28_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, to_dtype, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf27', mode=None), StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(FallbackKernel)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: FallbackKernel
    buf30.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op31: ExternKernelSchedulerNode(MultiOutput)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: MultiOutput
    buf31.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = None


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 589824})]
op36.unmet_dependencies = []
op36.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 589824})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (589824, 1)
op36.sizes = ([589824], [])
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf36_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op36_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf36', get_index_1, to_dtype, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf36', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 256})]
op38.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 196608}), MemoryDep('buf37', c0, {c0: 196608})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (256, 768)
op38.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op38_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf38', get_index_2, getitem)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 256})]
op39.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 196608}), MemoryDep('buf37', c0, {c0: 196608})]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf39.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (256, 768)
op39.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op39_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf39', get_index_2, getitem_1)
        return store_reduction


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 196608})]
op41.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf38', c0, {c0: 256}),
        MemoryDep('buf39', c0, {c0: 256})]
op41.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 256, c1: 768})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (196608, 1)
op41.sizes = ([256, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op41_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf38', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf39', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg12_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, to_dtype_1, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2359296})]
op42.unmet_dependencies = []
op42.met_dependencies = [MemoryDep('arg13_1', c0, {c0: 2359296})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (2359296, 1)
op42.sizes = ([2359296], [])
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf42_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op42_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg13_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf42', get_index_1, to_dtype, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None), StarDep(name='buf42', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 786432})]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 786432})]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (786432, 1)
op44.sizes = ([786432], [])
buf43_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf44_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op44_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf44', get_index_2, to_dtype_2, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2359296})]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg14_1', c0, {c0: 2359296})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2359296, 1)
op45.sizes = ([2359296], [])
arg14_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf45_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op45_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg14_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf45', get_index_1, to_dtype, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 256})]
op47.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608})]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf47.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (256, 768)
op47.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op47_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem)
        return store_reduction


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 256})]
op48.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (256, 768)
op48.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op48_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_3, getitem_1)
        return store_reduction


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 196608})]
op50.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608}),
        MemoryDep('buf47', c0, {c0: 256}),
        MemoryDep('buf48', c0, {c0: 256})]
op50.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 256, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (196608, 1)
op50.sizes = ([256, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op50_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf47', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf48', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg15_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf50', get_index_6, to_dtype_2, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1769472})]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 1769472})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (1769472, 1)
op51.sizes = ([1769472], [])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf51_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op51_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, to_dtype, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf50', mode=None), StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = extern_kernels.mm


op53: ExternKernelSchedulerNode(FallbackKernel)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: FallbackKernel
    buf53.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op54: ExternKernelSchedulerNode(MultiOutput)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: MultiOutput
    buf54.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = None


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 589824})]
op59.unmet_dependencies = []
op59.met_dependencies = [MemoryDep('arg17_1', c0, {c0: 589824})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (589824, 1)
op59.sizes = ([589824], [])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf59_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op59_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg17_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf59', get_index_1, to_dtype, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 256})]
op61.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608}),
        MemoryDep('buf60', c0, {c0: 196608})]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (256, 768)
op61.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf60_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op61_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf60', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_4, getitem)
        return store_reduction


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 256})]
op62.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608}),
        MemoryDep('buf60', c0, {c0: 196608})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (256, 768)
op62.sizes = ([256], [768])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf60_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op62_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf60', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf62', get_index_4, getitem_1)
        return store_reduction


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 196608})]
op64.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608}),
        MemoryDep('buf60', c0, {c0: 196608}),
        MemoryDep('buf61', c0, {c0: 256}),
        MemoryDep('buf62', c0, {c0: 256})]
op64.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 256, c1: 768})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (196608, 1)
op64.sizes = ([256, 768], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf60_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op64_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf60', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf61', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf62', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg18_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf64', get_index_7, to_dtype_3, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 2359296})]
op65.unmet_dependencies = []
op65.met_dependencies = [MemoryDep('arg19_1', c0, {c0: 2359296})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (2359296, 1)
op65.sizes = ([2359296], [])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf65_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op65_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg19_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, to_dtype, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None), StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 786432})]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 786432})]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (786432, 1)
op67.sizes = ([786432], [])
buf66_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf67_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op67_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf67', get_index_2, to_dtype_2, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 2359296})]
op68.unmet_dependencies = []
op68.met_dependencies = [MemoryDep('arg20_1', c0, {c0: 2359296})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (2359296, 1)
op68.sizes = ([2359296], [])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op68_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg20_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, to_dtype, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf67', mode=None), StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 196608})]
op70.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 196608}),
        MemoryDep('buf37', c0, {c0: 196608}),
        MemoryDep('buf46', c0, {c0: 196608}),
        MemoryDep('buf60', c0, {c0: 196608}),
        MemoryDep('buf69', c0, {c0: 196608})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (196608, 1)
op70.sizes = ([196608], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf60_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf69_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op70_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf60', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf69', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf70', get_index_5, add_3, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 256})]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 196608})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf71.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (256, 768)
op71.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op71_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, getitem)
        return store_reduction


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 256})]
op72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 196608})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (256, 768)
op72.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op72_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_1, getitem_1)
        return store_reduction


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 196608})]
op74.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf71', c0, {c0: 256}),
        MemoryDep('buf72', c0, {c0: 256})]
op74.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 256, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (196608, 1)
op74.sizes = ([256, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op74_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf72', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg21_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf74', get_index_4, to_dtype, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1769472})]
op75.unmet_dependencies = []
op75.met_dependencies = [MemoryDep('arg22_1', c0, {c0: 1769472})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1769472, 1)
op75.sizes = ([1769472], [])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op75_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg22_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf75', get_index_1, to_dtype, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None), StarDep(name='buf75', mode=None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: ExternKernelSchedulerNode(FallbackKernel)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: FallbackKernel
    buf77.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op78: ExternKernelSchedulerNode(MultiOutput)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: MultiOutput
    buf78.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = None


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 589824})]
op83.unmet_dependencies = []
op83.met_dependencies = [MemoryDep('arg23_1', c0, {c0: 589824})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (589824, 1)
op83.sizes = ([589824], [])
arg23_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf83_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op83_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf83', get_index_1, to_dtype, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 256})]
op85.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 196608}), MemoryDep('buf84', c0, {c0: 196608})]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (256, 768)
op85.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op85_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_2, getitem)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 256})]
op86.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 196608}), MemoryDep('buf84', c0, {c0: 196608})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf86.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (256, 768)
op86.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op86_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf86', get_index_2, getitem_1)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 196608})]
op88.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf85', c0, {c0: 256}),
        MemoryDep('buf86', c0, {c0: 256})]
op88.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 256, c1: 768})]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (196608, 1)
op88.sizes = ([256, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf88_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op88_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf85', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf86', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg24_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf88', get_index_5, to_dtype_1, None)
        return store


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 2359296})]
op89.unmet_dependencies = []
op89.met_dependencies = [MemoryDep('arg25_1', c0, {c0: 2359296})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (2359296, 1)
op89.sizes = ([2359296], [])
arg25_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf89_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op89_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf89', get_index_1, to_dtype, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf88', mode=None), StarDep(name='buf89', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.mm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 786432})]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 786432})]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (786432, 1)
op91.sizes = ([786432], [])
buf90_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf91_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op91_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf91', get_index_2, to_dtype_2, None)
        return store


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 2359296})]
op92.unmet_dependencies = []
op92.met_dependencies = [MemoryDep('arg26_1', c0, {c0: 2359296})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (2359296, 1)
op92.sizes = ([2359296], [])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op92_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, to_dtype, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf91', mode=None), StarDep(name='buf92', mode=None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 256})]
op94.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (256, 768)
op94.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op94_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem)
        return store_reduction


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 256})]
op95.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (256, 768)
op95.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op95_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem_1)
        return store_reduction


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 196608})]
op97.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 256}),
        MemoryDep('buf95', c0, {c0: 256})]
op97.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 256, c1: 768})]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (196608, 1)
op97.sizes = ([256, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op97_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf94', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf95', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg27_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf97', get_index_6, to_dtype_2, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1769472})]
op98.unmet_dependencies = []
op98.met_dependencies = [MemoryDep('arg28_1', c0, {c0: 1769472})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1769472, 1)
op98.sizes = ([1769472], [])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf98_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op98_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg28_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, to_dtype, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None), StarDep(name='buf98', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.mm


op100: ExternKernelSchedulerNode(FallbackKernel)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: FallbackKernel
    buf100.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op101: ExternKernelSchedulerNode(MultiOutput)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: MultiOutput
    buf101.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = None


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 589824})]
op106.unmet_dependencies = []
op106.met_dependencies = [MemoryDep('arg29_1', c0, {c0: 589824})]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (589824, 1)
op106.sizes = ([589824], [])
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf106_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op106_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg29_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf106', get_index_1, to_dtype, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf106', mode=None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 256})]
op108.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 196608}),
        MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (256, 768)
op108.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op108_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf107', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_4, getitem)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 256})]
op109.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 196608}),
        MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (256, 768)
op109.sizes = ([256], [768])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op109_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf107', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_4, getitem_1)
        return store_reduction


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 196608})]
op111.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 196608}),
        MemoryDep('buf108', c0, {c0: 256}),
        MemoryDep('buf109', c0, {c0: 256}),
        MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op111.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 256, c1: 768})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (196608, 1)
op111.sizes = ([256, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg30_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op111_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf107', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf108', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf109', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg30_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf111', get_index_7, to_dtype_3, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 2359296})]
op112.unmet_dependencies = []
op112.met_dependencies = [MemoryDep('arg31_1', c0, {c0: 2359296})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (2359296, 1)
op112.sizes = ([2359296], [])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf112_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op112_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg31_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf112', get_index_1, to_dtype, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 786432})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 786432})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (786432, 1)
op114.sizes = ([786432], [])
buf113_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf114_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op114_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf114', get_index_2, to_dtype_2, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 2359296})]
op115.unmet_dependencies = []
op115.met_dependencies = [MemoryDep('arg32_1', c0, {c0: 2359296})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (2359296, 1)
op115.sizes = ([2359296], [])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf115_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op115_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg32_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf115', get_index_1, to_dtype, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None), StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 196608})]
op117.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 196608}),
        MemoryDep('buf116', c0, {c0: 196608}),
        MemoryDep('buf70', c0, {c0: 196608}),
        MemoryDep('buf84', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (196608, 1)
op117.sizes = ([196608], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf116_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op117_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf107', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf116', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 256})]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 196608})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (256, 768)
op118.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op118_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 256})]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 196608})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (256, 768)
op119.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op119_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 196608})]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf118', c0, {c0: 256}),
        MemoryDep('buf119', c0, {c0: 256})]
op121.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 256, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (196608, 1)
op121.sizes = ([256, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf121_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op121_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg33_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf121', get_index_4, to_dtype, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1769472})]
op122.unmet_dependencies = []
op122.met_dependencies = [MemoryDep('arg34_1', c0, {c0: 1769472})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1769472, 1)
op122.sizes = ([1769472], [])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf122_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op122_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg34_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf122', get_index_1, to_dtype, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf121', mode=None), StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: ExternKernelSchedulerNode(FallbackKernel)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: FallbackKernel
    buf124.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op125: ExternKernelSchedulerNode(MultiOutput)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: MultiOutput
    buf125.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = None


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 589824})]
op130.unmet_dependencies = []
op130.met_dependencies = [MemoryDep('arg35_1', c0, {c0: 589824})]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (589824, 1)
op130.sizes = ([589824], [])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf130_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op130_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg35_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf130', get_index_1, to_dtype, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf125', mode=None), StarDep(name='buf130', mode=None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 256})]
op132.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 196608}), MemoryDep('buf131', c0, {c0: 196608})]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (256, 768)
op132.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op132_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_2, getitem)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 256})]
op133.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 196608}), MemoryDep('buf131', c0, {c0: 196608})]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (256, 768)
op133.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op133_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_2, getitem_1)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 196608})]
op135.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf132', c0, {c0: 256}),
        MemoryDep('buf133', c0, {c0: 256})]
op135.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 256, c1: 768})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (196608, 1)
op135.sizes = ([256, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op135_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf133', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg36_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, to_dtype_1, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 2359296})]
op136.unmet_dependencies = []
op136.met_dependencies = [MemoryDep('arg37_1', c0, {c0: 2359296})]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (2359296, 1)
op136.sizes = ([2359296], [])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf136_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op136_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf136', get_index_1, to_dtype, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None), StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 786432})]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 786432})]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (786432, 1)
op138.sizes = ([786432], [])
buf137_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf138_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op138_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf138', get_index_2, to_dtype_2, None)
        return store


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 2359296})]
op139.unmet_dependencies = []
op139.met_dependencies = [MemoryDep('arg38_1', c0, {c0: 2359296})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (2359296, 1)
op139.sizes = ([2359296], [])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf139_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op139_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg38_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf139', get_index_1, to_dtype, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf138', mode=None), StarDep(name='buf139', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 256})]
op141.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608})]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf141.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (256, 768)
op141.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op141_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem)
        return store_reduction


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 256})]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608})]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf142.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (256, 768)
op142.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op142_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem_1)
        return store_reduction


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 196608})]
op144.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608}),
        MemoryDep('buf141', c0, {c0: 256}),
        MemoryDep('buf142', c0, {c0: 256})]
op144.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 256, c1: 768})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (196608, 1)
op144.sizes = ([256, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op144_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf141', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf142', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg39_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf144', get_index_6, to_dtype_2, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 1769472})]
op145.unmet_dependencies = []
op145.met_dependencies = [MemoryDep('arg40_1', c0, {c0: 1769472})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (1769472, 1)
op145.sizes = ([1769472], [])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf145_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op145_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg40_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf145', get_index_1, to_dtype, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: ExternKernelSchedulerNode(FallbackKernel)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: FallbackKernel
    buf147.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op148: ExternKernelSchedulerNode(MultiOutput)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: MultiOutput
    buf148.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = None


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 589824})]
op153.unmet_dependencies = []
op153.met_dependencies = [MemoryDep('arg41_1', c0, {c0: 589824})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (589824, 1)
op153.sizes = ([589824], [])
arg41_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf153_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op153_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg41_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf153', get_index_1, to_dtype, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf148', mode=None), StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 256})]
op155.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608}),
        MemoryDep('buf154', c0, {c0: 196608})]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (256, 768)
op155.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op155_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf154', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_4, getitem)
        return store_reduction


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 256})]
op156.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608}),
        MemoryDep('buf154', c0, {c0: 196608})]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (256, 768)
op156.sizes = ([256], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op156_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf154', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_4, getitem_1)
        return store_reduction


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 196608})]
op158.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608}),
        MemoryDep('buf154', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 256}),
        MemoryDep('buf156', c0, {c0: 256})]
op158.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 256, c1: 768})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (196608, 1)
op158.sizes = ([256, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf158_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op158_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf154', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf155', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf156', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg42_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf158', get_index_7, to_dtype_3, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 2359296})]
op159.unmet_dependencies = []
op159.met_dependencies = [MemoryDep('arg43_1', c0, {c0: 2359296})]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (2359296, 1)
op159.sizes = ([2359296], [])
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf159_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op159_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg43_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf159', get_index_1, to_dtype, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 786432})]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 786432})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (786432, 1)
op161.sizes = ([786432], [])
buf160_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf161_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op161_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf161', get_index_2, to_dtype_2, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 2359296})]
op162.unmet_dependencies = []
op162.met_dependencies = [MemoryDep('arg44_1', c0, {c0: 2359296})]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (2359296, 1)
op162.sizes = ([2359296], [])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf162_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op162_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg44_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, to_dtype, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None), StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.mm


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 196608})]
op164.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 196608}),
        MemoryDep('buf131', c0, {c0: 196608}),
        MemoryDep('buf140', c0, {c0: 196608}),
        MemoryDep('buf154', c0, {c0: 196608}),
        MemoryDep('buf163', c0, {c0: 196608})]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (196608, 1)
op164.sizes = ([196608], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf163_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op164_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf131', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf154', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf163', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf164', get_index_5, add_3, None)
        return store


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 256})]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 196608})]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (256, 768)
op165.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op165_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf165', get_index_1, getitem)
        return store_reduction


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 256})]
op166.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 196608})]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (256, 768)
op166.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op166_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_1, getitem_1)
        return store_reduction


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 196608})]
op168.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf165', c0, {c0: 256}),
        MemoryDep('buf166', c0, {c0: 256})]
op168.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 256, c1: 768})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (196608, 1)
op168.sizes = ([256, 768], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op168_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf165', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf166', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg45_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, to_dtype, None)
        return store


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1769472})]
op169.unmet_dependencies = []
op169.met_dependencies = [MemoryDep('arg46_1', c0, {c0: 1769472})]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1769472, 1)
op169.sizes = ([1769472], [])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf169_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op169_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg46_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf169', get_index_1, to_dtype, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf168', mode=None), StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171: ExternKernelSchedulerNode(FallbackKernel)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: FallbackKernel
    buf171.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op172: ExternKernelSchedulerNode(MultiOutput)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: MultiOutput
    buf172.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = None


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 589824})]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg47_1', c0, {c0: 589824})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (589824, 1)
op177.sizes = ([589824], [])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf177_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op177_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg47_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf177', get_index_1, to_dtype, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf172', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 256})]
op179.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 196608}), MemoryDep('buf178', c0, {c0: 196608})]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf179.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (256, 768)
op179.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op179_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf179', get_index_2, getitem)
        return store_reduction


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 256})]
op180.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 196608}), MemoryDep('buf178', c0, {c0: 196608})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (256, 768)
op180.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op180_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_2, getitem_1)
        return store_reduction


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 196608})]
op182.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf179', c0, {c0: 256}),
        MemoryDep('buf180', c0, {c0: 256})]
op182.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 256, c1: 768})]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (196608, 1)
op182.sizes = ([256, 768], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf182_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op182_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf179', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf180', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg48_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf182', get_index_5, to_dtype_1, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 2359296})]
op183.unmet_dependencies = []
op183.met_dependencies = [MemoryDep('arg49_1', c0, {c0: 2359296})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (2359296, 1)
op183.sizes = ([2359296], [])
arg49_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf183_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op183_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg49_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf183', get_index_1, to_dtype, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 786432})]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 786432})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (786432, 1)
op185.sizes = ([786432], [])
buf184_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf185_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op185_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf184', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, to_dtype_2, None)
        return store


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 2359296})]
op186.unmet_dependencies = []
op186.met_dependencies = [MemoryDep('arg50_1', c0, {c0: 2359296})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (2359296, 1)
op186.sizes = ([2359296], [])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf186_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op186_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg50_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf186', get_index_1, to_dtype, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf185', mode=None), StarDep(name='buf186', mode=None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op187.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 256})]
op188.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608})]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (256, 768)
op188.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op188_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem)
        return store_reduction


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 256})]
op189.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608})]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (256, 768)
op189.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op189_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_3, getitem_1)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 196608})]
op191.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608}),
        MemoryDep('buf188', c0, {c0: 256}),
        MemoryDep('buf189', c0, {c0: 256})]
op191.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 256, c1: 768})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (196608, 1)
op191.sizes = ([256, 768], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op191_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf188', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf189', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf191', get_index_6, to_dtype_2, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1769472})]
op192.unmet_dependencies = []
op192.met_dependencies = [MemoryDep('arg52_1', c0, {c0: 1769472})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1769472, 1)
op192.sizes = ([1769472], [])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf192_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op192_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg52_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf192', get_index_1, to_dtype, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf191', mode=None), StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = extern_kernels.mm


op194: ExternKernelSchedulerNode(FallbackKernel)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: FallbackKernel
    buf194.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op195: ExternKernelSchedulerNode(MultiOutput)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: MultiOutput
    buf195.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = None


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 589824})]
op200.unmet_dependencies = []
op200.met_dependencies = [MemoryDep('arg53_1', c0, {c0: 589824})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (589824, 1)
op200.sizes = ([589824], [])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf200_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op200_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg53_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf200', get_index_1, to_dtype, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf195', mode=None), StarDep(name='buf200', mode=None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op201.node.kernel = extern_kernels.mm


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 256})]
op202.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608}),
        MemoryDep('buf201', c0, {c0: 196608})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (256, 768)
op202.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op202_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf201', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_4, getitem)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 256})]
op203.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608}),
        MemoryDep('buf201', c0, {c0: 196608})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (256, 768)
op203.sizes = ([256], [768])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op203_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf201', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_4, getitem_1)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 196608})]
op205.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608}),
        MemoryDep('buf201', c0, {c0: 196608}),
        MemoryDep('buf202', c0, {c0: 256}),
        MemoryDep('buf203', c0, {c0: 256})]
op205.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 256, c1: 768})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (196608, 1)
op205.sizes = ([256, 768], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op205_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf201', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf202', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf203', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg54_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf205', get_index_7, to_dtype_3, None)
        return store


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 2359296})]
op206.unmet_dependencies = []
op206.met_dependencies = [MemoryDep('arg55_1', c0, {c0: 2359296})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (2359296, 1)
op206.sizes = ([2359296], [])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op206_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg55_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf206', get_index_1, to_dtype, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None), StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 786432})]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 786432})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (786432, 1)
op208.sizes = ([786432], [])
buf207_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf208_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op208_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf208', get_index_2, to_dtype_2, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 2359296})]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg56_1', c0, {c0: 2359296})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (2359296, 1)
op209.sizes = ([2359296], [])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf209_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op209_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf209', get_index_1, to_dtype, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.mm


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 196608})]
op211.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 196608}),
        MemoryDep('buf178', c0, {c0: 196608}),
        MemoryDep('buf187', c0, {c0: 196608}),
        MemoryDep('buf201', c0, {c0: 196608}),
        MemoryDep('buf210', c0, {c0: 196608})]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (196608, 1)
op211.sizes = ([196608], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf210_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op211_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf201', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf210', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf211', get_index_5, add_3, None)
        return store


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 256})]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 196608})]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (256, 768)
op212.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op212_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf212', get_index_1, getitem)
        return store_reduction


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 256})]
op213.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 196608})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (256, 768)
op213.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op213_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, getitem_1)
        return store_reduction


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 196608})]
op215.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf212', c0, {c0: 256}),
        MemoryDep('buf213', c0, {c0: 256})]
op215.met_dependencies = [MemoryDep('arg57_1', c1, {c0: 256, c1: 768})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (196608, 1)
op215.sizes = ([256, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg57_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op215_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf212', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf213', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg57_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf215', get_index_4, to_dtype, None)
        return store


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1769472})]
op216.unmet_dependencies = []
op216.met_dependencies = [MemoryDep('arg58_1', c0, {c0: 1769472})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1769472, 1)
op216.sizes = ([1769472], [])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf216_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op216_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg58_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf216', get_index_1, to_dtype, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = extern_kernels.mm


op218: ExternKernelSchedulerNode(FallbackKernel)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: FallbackKernel
    buf218.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op219: ExternKernelSchedulerNode(MultiOutput)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: MultiOutput
    buf219.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = None


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 589824})]
op224.unmet_dependencies = []
op224.met_dependencies = [MemoryDep('arg59_1', c0, {c0: 589824})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (589824, 1)
op224.sizes = ([589824], [])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf224_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op224_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg59_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf224', get_index_1, to_dtype, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf219', mode=None), StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.mm


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 256})]
op226.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 196608}), MemoryDep('buf225', c0, {c0: 196608})]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (256, 768)
op226.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op226_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf226', get_index_2, getitem)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 256})]
op227.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 196608}), MemoryDep('buf225', c0, {c0: 196608})]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (256, 768)
op227.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op227_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf227', get_index_2, getitem_1)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 196608})]
op229.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf226', c0, {c0: 256}),
        MemoryDep('buf227', c0, {c0: 256})]
op229.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 256, c1: 768})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (196608, 1)
op229.sizes = ([256, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op229_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf226', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf227', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg60_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, to_dtype_1, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 2359296})]
op230.unmet_dependencies = []
op230.met_dependencies = [MemoryDep('arg61_1', c0, {c0: 2359296})]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (2359296, 1)
op230.sizes = ([2359296], [])
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf230_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op230_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg61_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf230', get_index_1, to_dtype, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 786432})]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 786432})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (786432, 1)
op232.sizes = ([786432], [])
buf231_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf232_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op232_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf232', get_index_2, to_dtype_2, None)
        return store


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 2359296})]
op233.unmet_dependencies = []
op233.met_dependencies = [MemoryDep('arg62_1', c0, {c0: 2359296})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (2359296, 1)
op233.sizes = ([2359296], [])
arg62_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf233_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op233_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg62_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf233', get_index_1, to_dtype, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf232', mode=None), StarDep(name='buf233', mode=None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op234.node.kernel = extern_kernels.mm


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 256})]
op235.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608})]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (256, 768)
op235.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op235_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 256})]
op236.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608})]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (256, 768)
op236.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op236_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem_1)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 196608})]
op238.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608}),
        MemoryDep('buf235', c0, {c0: 256}),
        MemoryDep('buf236', c0, {c0: 256})]
op238.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 256, c1: 768})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (196608, 1)
op238.sizes = ([256, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op238_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf235', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf236', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg63_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf238', get_index_6, to_dtype_2, None)
        return store


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 1769472})]
op239.unmet_dependencies = []
op239.met_dependencies = [MemoryDep('arg64_1', c0, {c0: 1769472})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (1769472, 1)
op239.sizes = ([1769472], [])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf239_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op239_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg64_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf239', get_index_1, to_dtype, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf238', mode=None), StarDep(name='buf239', mode=None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241: ExternKernelSchedulerNode(FallbackKernel)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: FallbackKernel
    buf241.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op242: ExternKernelSchedulerNode(MultiOutput)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: MultiOutput
    buf242.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = None


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 589824})]
op247.unmet_dependencies = []
op247.met_dependencies = [MemoryDep('arg65_1', c0, {c0: 589824})]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (589824, 1)
op247.sizes = ([589824], [])
arg65_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf247_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op247_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf247', get_index_1, to_dtype, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf242', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.mm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 256})]
op249.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608}),
        MemoryDep('buf248', c0, {c0: 196608})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf249.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (256, 768)
op249.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op249_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf248', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_4, getitem)
        return store_reduction


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 256})]
op250.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608}),
        MemoryDep('buf248', c0, {c0: 196608})]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (256, 768)
op250.sizes = ([256], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op250_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf248', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf250', get_index_4, getitem_1)
        return store_reduction


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 196608})]
op252.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608}),
        MemoryDep('buf248', c0, {c0: 196608}),
        MemoryDep('buf249', c0, {c0: 256}),
        MemoryDep('buf250', c0, {c0: 256})]
op252.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 256, c1: 768})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (196608, 1)
op252.sizes = ([256, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op252_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf248', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf249', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf250', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg66_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf252', get_index_7, to_dtype_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 2359296})]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg67_1', c0, {c0: 2359296})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (2359296, 1)
op253.sizes = ([2359296], [])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf253_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op253_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg67_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf253', get_index_1, to_dtype, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 786432})]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 786432})]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (786432, 1)
op255.sizes = ([786432], [])
buf254_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op255_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf255', get_index_2, to_dtype_2, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 2359296})]
op256.unmet_dependencies = []
op256.met_dependencies = [MemoryDep('arg68_1', c0, {c0: 2359296})]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (2359296, 1)
op256.sizes = ([2359296], [])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf256_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op256_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg68_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf256', get_index_1, to_dtype, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf255', mode=None), StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 196608})]
op258.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf234', c0, {c0: 196608}),
        MemoryDep('buf248', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608})]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (196608, 1)
op258.sizes = ([196608], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf234_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op258_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf225', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf248', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf257', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf258', get_index_5, add_3, None)
        return store


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 256})]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 196608})]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf259.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (256, 768)
op259.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op259_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_1, getitem)
        return store_reduction


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 256})]
op260.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 196608})]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (256, 768)
op260.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op260_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf260', get_index_1, getitem_1)
        return store_reduction


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 196608})]
op262.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 196608}),
        MemoryDep('buf259', c0, {c0: 256}),
        MemoryDep('buf260', c0, {c0: 256})]
op262.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 256, c1: 768})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (196608, 1)
op262.sizes = ([256, 768], [])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf259', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf260', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf262', get_index_4, to_dtype, None)
        return store


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1769472})]
op263.unmet_dependencies = []
op263.met_dependencies = [MemoryDep('arg70_1', c0, {c0: 1769472})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (1769472, 1)
op263.sizes = ([1769472], [])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf263_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
class op263_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf263', get_index_1, to_dtype, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: ExternKernelSchedulerNode(FallbackKernel)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: FallbackKernel
    buf265.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op266: ExternKernelSchedulerNode(MultiOutput)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: MultiOutput
    buf266.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = None


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 589824})]
op271.unmet_dependencies = []
op271.met_dependencies = [MemoryDep('arg71_1', c0, {c0: 589824})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (589824, 1)
op271.sizes = ([589824], [])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf271_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
class op271_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg71_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf271', get_index_1, to_dtype, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 256})]
op273.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 196608}), MemoryDep('buf272', c0, {c0: 196608})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf273.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (256, 768)
op273.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op273_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf273', get_index_2, getitem)
        return store_reduction


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 256})]
op274.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 196608}), MemoryDep('buf272', c0, {c0: 196608})]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (256, 768)
op274.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op274_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_2, getitem_1)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 196608})]
op276.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf273', c0, {c0: 256}),
        MemoryDep('buf274', c0, {c0: 256})]
op276.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 256, c1: 768})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (196608, 1)
op276.sizes = ([256, 768], [])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op276_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf273', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf274', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg72_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype_1 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, to_dtype_1, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 2359296})]
op277.unmet_dependencies = []
op277.met_dependencies = [MemoryDep('arg73_1', c0, {c0: 2359296})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (2359296, 1)
op277.sizes = ([2359296], [])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf277_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
class op277_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg73_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf277', get_index_1, to_dtype, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf276', mode=None), StarDep(name='buf277', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 786432})]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 786432})]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (786432, 1)
op279.sizes = ([786432], [])
buf278_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf279_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op279_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf278', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf279', get_index_2, to_dtype_2, None)
        return store


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 2359296})]
op280.unmet_dependencies = []
op280.met_dependencies = [MemoryDep('arg74_1', c0, {c0: 2359296})]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (2359296, 1)
op280.sizes = ([2359296], [])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf280_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
class op280_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg74_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf280', get_index_1, to_dtype, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None), StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 256})]
op282.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf281', c0, {c0: 196608})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (256, 768)
op282.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op282_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_3, getitem)
        return store_reduction


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 256})]
op283.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf281', c0, {c0: 196608})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (256, 768)
op283.sizes = ([256], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op283_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem_1)
        return store_reduction


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 196608})]
op285.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf281', c0, {c0: 196608}),
        MemoryDep('buf282', c0, {c0: 256}),
        MemoryDep('buf283', c0, {c0: 256})]
op285.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 256, c1: 768})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (196608, 1)
op285.sizes = ([256, 768], [])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op285_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf282', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf283', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg75_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        to_dtype_2 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf285', get_index_6, to_dtype_2, None)
        return store


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 49920})]
op286.unmet_dependencies = []
op286.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 49920})]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.bfloat16, size=[65, 768], stride=[768, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (49920, 1)
op286.sizes = ([49920], [])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
buf286_layout = FixedLayout('cuda:0', torch.bfloat16, size=[65, 768], stride=[768, 1])
class op286_loop_body:
    var_ranges = {p0: 49920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, to_dtype, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf285', mode=None), StarDep(name='buf286', mode=None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 256})]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 16640})]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (256, 65)
op288.sizes = ([256], [65])
buf287_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
class op288_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = 65*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        reduction = ops.reduction(torch.float32, torch.float32, 'online_softmax_reduce', to_dtype)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf288', get_index_1, getitem)
        return store_reduction


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 256})]
op289.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 16640})]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (256, 65)
op289.sizes = ([256], [65])
buf287_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
class op289_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = 65*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        reduction = ops.reduction(torch.float32, torch.float32, 'online_softmax_reduce', to_dtype)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf289', get_index_1, getitem_1)
        return store_reduction


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', 0, {})]
op290.unmet_dependencies = 
    [   MemoryDep('buf287', 65*c0 + tmp0, {c0: 256}),
        MemoryDep('buf288', c0, {c0: 256}),
        MemoryDep('buf289', c0, {c0: 256})]
op290.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 256})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf290.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (1, 256)
op290.sizes = ([], [256])
arg76_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
buf287_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op290_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = indirect0 + 65*p0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg76_1', get_index_1)
        constant_1 = ops.constant(-1, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg76_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf287', get_index_3)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf288', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf289', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_6, reduction)
        return store_reduction


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', 0, {})]
op291.unmet_dependencies = []
op291.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 256})]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (1, 256)
op291.sizes = ([], [256])
arg76_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
buf291_layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
class op291_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf291', get_index_1, reduction)
        return store_reduction


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', 0, {})]
op292.unmet_dependencies = [MemoryDep('buf290', 0, {}), MemoryDep('buf291', 0, {})]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf292.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (1, 1)
op292.sizes = ([], [])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf291_layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op292_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf292', get_index_2, truediv, None)
        return store


