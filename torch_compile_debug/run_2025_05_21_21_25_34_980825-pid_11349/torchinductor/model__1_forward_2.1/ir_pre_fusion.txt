op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 64})]
op0.unmet_dependencies = []
op0.met_dependencies = []
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
    buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (64, 1)
op0.sizes = ([64], [])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
class op0_loop_body:
    var_ranges = {p0: 64}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, index_expr, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 196608})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 256}),
        MemoryDep('primals_2', c1 + 768*tmp0, {c0: 256, c1: 768})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (196608, 1)
op1.sizes = ([256, 768], [])
primals_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op1_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = p0
    index1 = 768*indirect0 + p1
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_2', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf1', get_index_2, load_1, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 49152})]
op2.unmet_dependencies = []
op2.met_dependencies = [MemoryDep('primals_3', c0, {c0: 49152})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (49152, 1)
op2.sizes = ([64, 768], [])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
class op2_loop_body:
    var_ranges = {p0: 64, p1: 768}
    index0 = p0
    index1 = 64
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        load = ops.load('primals_3', get_index_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf2', get_index_3, load, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 256})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 196608}), MemoryDep('buf2', c1, {c0: 4, c1: 49152})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (256, 768)
op3.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op3_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem)
        return store_reduction


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 256})]
op4.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 196608}), MemoryDep('buf2', c1, {c0: 4, c1: 49152})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (256, 768)
op4.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op4_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf4', get_index_2, getitem_1)
        return store_reduction


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 256})]
op6.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 256})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (256, 1)
op6.sizes = ([256], [])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op6_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf6', get_index_1, rsqrt, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1769472})]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('primals_5', c0, {c0: 1769472})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (1769472, 1)
op7.sizes = ([1769472], [])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf7_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op7_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_5', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, to_dtype, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 196608})]
op8.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152}),
        MemoryDep('buf3', c0, {c0: 256}),
        MemoryDep('buf6', c0, {c0: 256})]
op8.met_dependencies = [MemoryDep('primals_4', c1, {c0: 256, c1: 768})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (196608, 1)
op8.sizes = ([4, 64, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op8_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    index3 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf3', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf6', get_index_3)
        mul = ops.mul(sub, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('primals_4', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        to_dtype = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, to_dtype, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None), StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.node.kernel = extern_kernels.mm


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = None


op12: ExternKernelSchedulerNode(MultiOutput)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: MultiOutput
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf12.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op12.node.kernel = None


op13: ExternKernelSchedulerNode(MultiOutput)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: MultiOutput
    buf13.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf13.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op13.node.kernel = None


op14: ExternKernelSchedulerNode(MultiOutput)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: MultiOutput
    buf14.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf14.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op14.node.kernel = None


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 589824})]
op16.unmet_dependencies = []
op16.met_dependencies = [MemoryDep('primals_6', c0, {c0: 589824})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf16.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (589824, 1)
op16.sizes = ([589824], [])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf16_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op16_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_6', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf16', get_index_1, to_dtype, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 256})]
op18.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (256, 768)
op18.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op18_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 256})]
op19.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (256, 768)
op19.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op19_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
        return store_reduction


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 196608})]
op21.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf19', c0, {c0: 256}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152})]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (196608, 1)
op21.sizes = ([4, 64, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf19', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, mul, None)
        return store


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 2359296})]
op22.unmet_dependencies = []
op22.met_dependencies = [MemoryDep('primals_8', c0, {c0: 2359296})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (2359296, 1)
op22.sizes = ([2359296], [])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf22_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op22_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_8', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, to_dtype, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 196608})]
op23.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 196608})]
op23.met_dependencies = [MemoryDep('primals_7', c1, {c0: 256, c1: 768})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf23.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (196608, 1)
op23.sizes = ([256, 768], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op23_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_7', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, to_dtype, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None), StarDep(name='buf23', mode=None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 2359296})]
op25.unmet_dependencies = []
op25.met_dependencies = [MemoryDep('primals_9', c0, {c0: 2359296})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (2359296, 1)
op25.sizes = ([2359296], [])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf25_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op25_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_9', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf25', get_index_1, to_dtype, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 786432})]
op26.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 786432})]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (786432, 1)
op26.sizes = ([786432], [])
buf24_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf26_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op26_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf26', get_index_2, to_dtype_2, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf25', mode=None), StarDep(name='buf26', mode=None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 256})]
op28.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152}),
        MemoryDep('buf27', c0, {c0: 196608})]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (256, 768)
op28.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op28_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf27', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf28', get_index_4, getitem)
        return store_reduction


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 256})]
op29.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152}),
        MemoryDep('buf27', c0, {c0: 196608})]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (256, 768)
op29.sizes = ([4, 64], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op29_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf27', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf29', get_index_4, getitem_1)
        return store_reduction


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 196608})]
op31.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152}),
        MemoryDep('buf27', c0, {c0: 196608}),
        MemoryDep('buf28', c0, {c0: 256}),
        MemoryDep('buf29', c0, {c0: 256})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (196608, 1)
op31.sizes = ([4, 64, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op31_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 768*p1 + p2
    index2 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf27', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf28', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf29', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf31', get_index_6, mul, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1769472})]
op32.unmet_dependencies = []
op32.met_dependencies = [MemoryDep('primals_11', c0, {c0: 1769472})]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (1769472, 1)
op32.sizes = ([1769472], [])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf32_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op32_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_11', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf32', get_index_1, to_dtype, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 196608})]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 196608})]
op33.met_dependencies = [MemoryDep('primals_10', c1, {c0: 256, c1: 768})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (196608, 1)
op33.sizes = ([256, 768], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op33_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf33', get_index_2, to_dtype, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.mm


op35: ExternKernelSchedulerNode(FallbackKernel)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: FallbackKernel
    buf35.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf35.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op36: ExternKernelSchedulerNode(MultiOutput)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: MultiOutput
    buf36.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = None


op37: ExternKernelSchedulerNode(MultiOutput)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: MultiOutput
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf37.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op37.node.kernel = None


op38: ExternKernelSchedulerNode(MultiOutput)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: MultiOutput
    buf38.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf38.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op38.node.kernel = None


op39: ExternKernelSchedulerNode(MultiOutput)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: MultiOutput
    buf39.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf39.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op39.node.kernel = None


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 589824})]
op41.unmet_dependencies = []
op41.met_dependencies = [MemoryDep('primals_12', c0, {c0: 589824})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (589824, 1)
op41.sizes = ([589824], [])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf41_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op41_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_12', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf41', get_index_1, to_dtype, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf41', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 196608})]
op43.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 196608}),
        MemoryDep('buf2', c1, {c0: 4, c1: 49152}),
        MemoryDep('buf27', c0, {c0: 196608}),
        MemoryDep('buf42', c0, {c0: 196608})]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (196608, 1)
op43.sizes = ([4, 49152], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf42_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op43_loop_body:
    var_ranges = {p0: 4, p1: 49152}
    index0 = 49152*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf27', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf42', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, add_3, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 256})]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 196608})]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (256, 768)
op44.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op44_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 256})]
op45.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 196608})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (256, 768)
op45.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op45_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, getitem_1)
        return store_reduction


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 196608})]
op47.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf44', c0, {c0: 256}),
        MemoryDep('buf45', c0, {c0: 256})]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (196608, 1)
op47.sizes = ([256, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op47_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf45', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf47', get_index_3, mul, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 2359296})]
op48.unmet_dependencies = []
op48.met_dependencies = [MemoryDep('primals_14', c0, {c0: 2359296})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (2359296, 1)
op48.sizes = ([2359296], [])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf48_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op48_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_14', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf48', get_index_1, to_dtype, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 196608})]
op49.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 196608})]
op49.met_dependencies = [MemoryDep('primals_13', c1, {c0: 256, c1: 768})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf49.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (196608, 1)
op49.sizes = ([256, 768], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf49_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op49_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf49', get_index_2, to_dtype, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 2359296})]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('primals_15', c0, {c0: 2359296})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (2359296, 1)
op51.sizes = ([2359296], [])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf51_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op51_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_15', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, to_dtype, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 786432})]
op52.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 786432})]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (786432, 1)
op52.sizes = ([786432], [])
buf50_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf52_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op52_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf50', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf52', get_index_2, to_dtype_2, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 256})]
op54.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 196608}), MemoryDep('buf53', c0, {c0: 196608})]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (256, 768)
op54.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op54_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_2, getitem)
        return store_reduction


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 256})]
op55.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 196608}), MemoryDep('buf53', c0, {c0: 196608})]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (256, 768)
op55.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op55_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_2, getitem_1)
        return store_reduction


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 196608})]
op57.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf54', c0, {c0: 256}),
        MemoryDep('buf55', c0, {c0: 256})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (196608, 1)
op57.sizes = ([256, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op57_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf55', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf57', get_index_4, mul, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1769472})]
op58.unmet_dependencies = []
op58.met_dependencies = [MemoryDep('primals_17', c0, {c0: 1769472})]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (1769472, 1)
op58.sizes = ([1769472], [])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf58_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op58_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_17', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf58', get_index_1, to_dtype, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 196608})]
op59.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 196608})]
op59.met_dependencies = [MemoryDep('primals_16', c1, {c0: 256, c1: 768})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (196608, 1)
op59.sizes = ([256, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op59_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf59', get_index_2, to_dtype, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf58', mode=None), StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.mm


op61: ExternKernelSchedulerNode(FallbackKernel)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: FallbackKernel
    buf61.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op62: ExternKernelSchedulerNode(MultiOutput)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: MultiOutput
    buf62.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.node.kernel = None


op63: ExternKernelSchedulerNode(MultiOutput)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: MultiOutput
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf63.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op63.node.kernel = None


op64: ExternKernelSchedulerNode(MultiOutput)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: MultiOutput
    buf64.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf64.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op64.node.kernel = None


op65: ExternKernelSchedulerNode(MultiOutput)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: MultiOutput
    buf65.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf65.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op65.node.kernel = None


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 589824})]
op67.unmet_dependencies = []
op67.met_dependencies = [MemoryDep('primals_18', c0, {c0: 589824})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (589824, 1)
op67.sizes = ([589824], [])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf67_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op67_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_18', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf67', get_index_1, to_dtype, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op68.node.kernel = extern_kernels.mm


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 256})]
op69.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf69.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (256, 768)
op69.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op69_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 256})]
op70.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (256, 768)
op70.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op70_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem_1)
        return store_reduction


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 196608})]
op72.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf69', c0, {c0: 256}),
        MemoryDep('buf70', c0, {c0: 256})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (196608, 1)
op72.sizes = ([256, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op72_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf69', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf70', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, mul, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 2359296})]
op73.unmet_dependencies = []
op73.met_dependencies = [MemoryDep('primals_20', c0, {c0: 2359296})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (2359296, 1)
op73.sizes = ([2359296], [])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf73_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op73_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_20', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf73', get_index_1, to_dtype, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 196608})]
op74.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 196608})]
op74.met_dependencies = [MemoryDep('primals_19', c1, {c0: 256, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (196608, 1)
op74.sizes = ([256, 768], [])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op74_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_19', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf74', get_index_2, to_dtype, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 2359296})]
op76.unmet_dependencies = []
op76.met_dependencies = [MemoryDep('primals_21', c0, {c0: 2359296})]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf76.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (2359296, 1)
op76.sizes = ([2359296], [])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf76_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op76_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf76', get_index_1, to_dtype, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 786432})]
op77.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 786432})]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (786432, 1)
op77.sizes = ([786432], [])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf77_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op77_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf77', get_index_2, to_dtype_2, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf76', mode=None), StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 256})]
op79.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf78', c0, {c0: 196608})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (256, 768)
op79.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf78_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op79_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf78', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_4, getitem)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 256})]
op80.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf78', c0, {c0: 196608})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (256, 768)
op80.sizes = ([256], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf78_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op80_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf78', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_4, getitem_1)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 196608})]
op82.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf78', c0, {c0: 196608}),
        MemoryDep('buf79', c0, {c0: 256}),
        MemoryDep('buf80', c0, {c0: 256})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (196608, 1)
op82.sizes = ([256, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf78_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf78', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf79', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf80', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf82', get_index_6, mul, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1769472})]
op83.unmet_dependencies = []
op83.met_dependencies = [MemoryDep('primals_23', c0, {c0: 1769472})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (1769472, 1)
op83.sizes = ([1769472], [])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf83_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op83_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_23', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf83', get_index_1, to_dtype, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 196608})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 196608})]
op84.met_dependencies = [MemoryDep('primals_22', c1, {c0: 256, c1: 768})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (196608, 1)
op84.sizes = ([256, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op84_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, to_dtype, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.mm


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.node.kernel = None


op88: ExternKernelSchedulerNode(MultiOutput)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: MultiOutput
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf88.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op88.node.kernel = None


op89: ExternKernelSchedulerNode(MultiOutput)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: MultiOutput
    buf89.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf89.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op89.node.kernel = None


op90: ExternKernelSchedulerNode(MultiOutput)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: MultiOutput
    buf90.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf90.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op90.node.kernel = None


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 589824})]
op92.unmet_dependencies = []
op92.met_dependencies = [MemoryDep('primals_24', c0, {c0: 589824})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf92.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (589824, 1)
op92.sizes = ([589824], [])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op92_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_24', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf92', get_index_1, to_dtype, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf92', mode=None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 196608})]
op94.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 196608}),
        MemoryDep('buf53', c0, {c0: 196608}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf78', c0, {c0: 196608}),
        MemoryDep('buf93', c0, {c0: 196608})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (196608, 1)
op94.sizes = ([196608], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf78_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op94_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf78', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf93', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf94', get_index_5, add_3, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 256})]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 196608})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (256, 768)
op95.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op95_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 256})]
op96.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 196608})]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (256, 768)
op96.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op96_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_1, getitem_1)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 196608})]
op98.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 196608}),
        MemoryDep('buf95', c0, {c0: 256}),
        MemoryDep('buf96', c0, {c0: 256})]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (196608, 1)
op98.sizes = ([256, 768], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op98_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf98', get_index_3, mul, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 2359296})]
op99.unmet_dependencies = []
op99.met_dependencies = [MemoryDep('primals_26', c0, {c0: 2359296})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (2359296, 1)
op99.sizes = ([2359296], [])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf99_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op99_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_26', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, to_dtype, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 196608})]
op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 196608})]
op100.met_dependencies = [MemoryDep('primals_25', c1, {c0: 256, c1: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (196608, 1)
op100.sizes = ([256, 768], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op100_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_25', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf100', get_index_2, to_dtype, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op101.node.kernel = extern_kernels.mm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 2359296})]
op102.unmet_dependencies = []
op102.met_dependencies = [MemoryDep('primals_27', c0, {c0: 2359296})]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (2359296, 1)
op102.sizes = ([2359296], [])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf102_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op102_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf102', get_index_1, to_dtype, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 786432})]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 786432})]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (786432, 1)
op103.sizes = ([786432], [])
buf101_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf103_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op103_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf101', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf103', get_index_2, to_dtype_2, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 256})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 196608}), MemoryDep('buf94', c0, {c0: 196608})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf105.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (256, 768)
op105.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op105_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_2, getitem)
        return store_reduction


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 256})]
op106.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 196608}), MemoryDep('buf94', c0, {c0: 196608})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (256, 768)
op106.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op106_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_2, getitem_1)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 196608})]
op108.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf105', c0, {c0: 256}),
        MemoryDep('buf106', c0, {c0: 256}),
        MemoryDep('buf94', c0, {c0: 196608})]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (196608, 1)
op108.sizes = ([256, 768], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op108_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf105', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf106', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf108', get_index_4, mul, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1769472})]
op109.unmet_dependencies = []
op109.met_dependencies = [MemoryDep('primals_29', c0, {c0: 1769472})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (1769472, 1)
op109.sizes = ([1769472], [])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf109_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op109_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf109', get_index_1, to_dtype, None)
        return store


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 196608})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 196608})]
op110.met_dependencies = [MemoryDep('primals_28', c1, {c0: 256, c1: 768})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (196608, 1)
op110.sizes = ([256, 768], [])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op110_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, to_dtype, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf109', mode=None), StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112: ExternKernelSchedulerNode(FallbackKernel)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: FallbackKernel
    buf112.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op113: ExternKernelSchedulerNode(MultiOutput)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: MultiOutput
    buf113.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf113.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op113.node.kernel = None


op114: ExternKernelSchedulerNode(MultiOutput)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: MultiOutput
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf114.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op114.node.kernel = None


op115: ExternKernelSchedulerNode(MultiOutput)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: MultiOutput
    buf115.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf115.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op115.node.kernel = None


op116: ExternKernelSchedulerNode(MultiOutput)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: MultiOutput
    buf116.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf116.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op116.node.kernel = None


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 589824})]
op118.unmet_dependencies = []
op118.met_dependencies = [MemoryDep('primals_30', c0, {c0: 589824})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (589824, 1)
op118.sizes = ([589824], [])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf118_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op118_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf118', get_index_1, to_dtype, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf113', mode=None), StarDep(name='buf118', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 256})]
op120.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 196608})]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf120.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (256, 768)
op120.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op120_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 256})]
op121.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 196608})]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False),
    ]
]
op121.group.device = cuda:0
op121.group.iteration = (256, 768)
op121.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op121_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem_1)
        return store_reduction


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 196608})]
op123.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf120', c0, {c0: 256}),
        MemoryDep('buf121', c0, {c0: 256}),
        MemoryDep('buf94', c0, {c0: 196608})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (196608, 1)
op123.sizes = ([256, 768], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op123_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf120', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf121', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, mul, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2359296})]
op124.unmet_dependencies = []
op124.met_dependencies = [MemoryDep('primals_32', c0, {c0: 2359296})]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (2359296, 1)
op124.sizes = ([2359296], [])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf124_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op124_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_32', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf124', get_index_1, to_dtype, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 196608})]
op125.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 196608})]
op125.met_dependencies = [MemoryDep('primals_31', c1, {c0: 256, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (196608, 1)
op125.sizes = ([256, 768], [])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op125_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf125', get_index_2, to_dtype, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf124', mode=None), StarDep(name='buf125', mode=None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.mm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 2359296})]
op127.unmet_dependencies = []
op127.met_dependencies = [MemoryDep('primals_33', c0, {c0: 2359296})]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (2359296, 1)
op127.sizes = ([2359296], [])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf127_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op127_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_33', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf127', get_index_1, to_dtype, None)
        return store


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 786432})]
op128.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 786432})]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (786432, 1)
op128.sizes = ([786432], [])
buf126_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf128_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op128_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, to_dtype_2, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf127', mode=None), StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 256})]
op130.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf129', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 196608})]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (256, 768)
op130.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf129_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op130_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf129', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_4, getitem)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 256})]
op131.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf129', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 196608})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (256, 768)
op131.sizes = ([256], [768])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf129_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op131_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf129', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_4, getitem_1)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 196608})]
op133.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf129', c0, {c0: 196608}),
        MemoryDep('buf130', c0, {c0: 256}),
        MemoryDep('buf131', c0, {c0: 256}),
        MemoryDep('buf94', c0, {c0: 196608})]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (196608, 1)
op133.sizes = ([256, 768], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf129_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op133_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf129', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf130', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf131', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf133', get_index_6, mul, None)
        return store


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1769472})]
op134.unmet_dependencies = []
op134.met_dependencies = [MemoryDep('primals_35', c0, {c0: 1769472})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf134.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1769472, 1)
op134.sizes = ([1769472], [])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf134_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op134_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_35', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf134', get_index_1, to_dtype, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 196608})]
op135.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 196608})]
op135.met_dependencies = [MemoryDep('primals_34', c1, {c0: 256, c1: 768})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (196608, 1)
op135.sizes = ([256, 768], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op135_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_34', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, to_dtype, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf134', mode=None), StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: ExternKernelSchedulerNode(FallbackKernel)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: FallbackKernel
    buf137.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op137.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op138: ExternKernelSchedulerNode(MultiOutput)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: MultiOutput
    buf138.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf138.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op138.node.kernel = None


op139: ExternKernelSchedulerNode(MultiOutput)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: MultiOutput
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf139.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op139.node.kernel = None


op140: ExternKernelSchedulerNode(MultiOutput)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: MultiOutput
    buf140.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf140.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op140.node.kernel = None


op141: ExternKernelSchedulerNode(MultiOutput)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: MultiOutput
    buf141.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf141.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op141.node.kernel = None


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 589824})]
op143.unmet_dependencies = []
op143.met_dependencies = [MemoryDep('primals_36', c0, {c0: 589824})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (589824, 1)
op143.sizes = ([589824], [])
primals_36_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf143_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op143_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_36', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf143', get_index_1, to_dtype, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf138', mode=None), StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 196608})]
op145.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 196608}),
        MemoryDep('buf119', c0, {c0: 196608}),
        MemoryDep('buf129', c0, {c0: 196608}),
        MemoryDep('buf144', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 196608})]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (196608, 1)
op145.sizes = ([196608], [])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf129_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf144_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op145_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf129', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf144', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf145', get_index_5, add_3, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 256})]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 196608})]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (256, 768)
op146.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op146_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf146', get_index_1, getitem)
        return store_reduction


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 256})]
op147.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 196608})]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (256, 768)
op147.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op147_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, getitem_1)
        return store_reduction


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 196608})]
op149.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf146', c0, {c0: 256}),
        MemoryDep('buf147', c0, {c0: 256})]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (196608, 1)
op149.sizes = ([256, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op149_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf146', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf147', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf149', get_index_3, mul, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 2359296})]
op150.unmet_dependencies = []
op150.met_dependencies = [MemoryDep('primals_38', c0, {c0: 2359296})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf150.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (2359296, 1)
op150.sizes = ([2359296], [])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf150_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op150_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_38', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf150', get_index_1, to_dtype, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 196608})]
op151.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 196608})]
op151.met_dependencies = [MemoryDep('primals_37', c1, {c0: 256, c1: 768})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (196608, 1)
op151.sizes = ([256, 768], [])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf151_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op151_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_37', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, to_dtype, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf150', mode=None), StarDep(name='buf151', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 2359296})]
op153.unmet_dependencies = []
op153.met_dependencies = [MemoryDep('primals_39', c0, {c0: 2359296})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (2359296, 1)
op153.sizes = ([2359296], [])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf153_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op153_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_39', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf153', get_index_1, to_dtype, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 786432})]
op154.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 786432})]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (786432, 1)
op154.sizes = ([786432], [])
buf152_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf154_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op154_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf154', get_index_2, to_dtype_2, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None), StarDep(name='buf154', mode=None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 256})]
op156.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 196608}), MemoryDep('buf155', c0, {c0: 196608})]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (256, 768)
op156.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op156_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_2, getitem)
        return store_reduction


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 256})]
op157.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 196608}), MemoryDep('buf155', c0, {c0: 196608})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (256, 768)
op157.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op157_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_2, getitem_1)
        return store_reduction


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 196608})]
op159.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf156', c0, {c0: 256}),
        MemoryDep('buf157', c0, {c0: 256})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (196608, 1)
op159.sizes = ([256, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op159_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf156', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf157', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf159', get_index_4, mul, None)
        return store


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 1769472})]
op160.unmet_dependencies = []
op160.met_dependencies = [MemoryDep('primals_41', c0, {c0: 1769472})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf160.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (1769472, 1)
op160.sizes = ([1769472], [])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf160_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op160_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_41', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf160', get_index_1, to_dtype, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 196608})]
op161.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 196608})]
op161.met_dependencies = [MemoryDep('primals_40', c1, {c0: 256, c1: 768})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (196608, 1)
op161.sizes = ([256, 768], [])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op161_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_40', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf161', get_index_2, to_dtype, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf160', mode=None), StarDep(name='buf161', mode=None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163: ExternKernelSchedulerNode(FallbackKernel)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: FallbackKernel
    buf163.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op163.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op164: ExternKernelSchedulerNode(MultiOutput)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: MultiOutput
    buf164.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op164.node.kernel = None


op165: ExternKernelSchedulerNode(MultiOutput)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: MultiOutput
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf165.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op165.node.kernel = None


op166: ExternKernelSchedulerNode(MultiOutput)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: MultiOutput
    buf166.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf166.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op166.node.kernel = None


op167: ExternKernelSchedulerNode(MultiOutput)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: MultiOutput
    buf167.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf167.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op167.node.kernel = None


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 589824})]
op169.unmet_dependencies = []
op169.met_dependencies = [MemoryDep('primals_42', c0, {c0: 589824})]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (589824, 1)
op169.sizes = ([589824], [])
primals_42_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf169_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op169_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_42', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf169', get_index_1, to_dtype, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf164', mode=None), StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op170.node.kernel = extern_kernels.mm


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 256})]
op171.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608})]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf171.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (256, 768)
op171.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op171_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem)
        return store_reduction


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 256})]
op172.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608})]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (256, 768)
op172.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op172_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem_1)
        return store_reduction


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 196608})]
op174.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608}),
        MemoryDep('buf171', c0, {c0: 256}),
        MemoryDep('buf172', c0, {c0: 256})]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (196608, 1)
op174.sizes = ([256, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op174_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf171', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf172', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf174', get_index_5, mul, None)
        return store


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 2359296})]
op175.unmet_dependencies = []
op175.met_dependencies = [MemoryDep('primals_44', c0, {c0: 2359296})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (2359296, 1)
op175.sizes = ([2359296], [])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf175_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op175_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_44', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, to_dtype, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 196608})]
op176.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 196608})]
op176.met_dependencies = [MemoryDep('primals_43', c1, {c0: 256, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf176.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (196608, 1)
op176.sizes = ([256, 768], [])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op176_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_43', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf176', get_index_2, to_dtype, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf175', mode=None), StarDep(name='buf176', mode=None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf177.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 2359296})]
op178.unmet_dependencies = []
op178.met_dependencies = [MemoryDep('primals_45', c0, {c0: 2359296})]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (2359296, 1)
op178.sizes = ([2359296], [])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op178_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_45', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, to_dtype, None)
        return store


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 786432})]
op179.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 786432})]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (786432, 1)
op179.sizes = ([786432], [])
buf177_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf179_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op179_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf177', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf179', get_index_2, to_dtype_2, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None), StarDep(name='buf179', mode=None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 256})]
op181.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608}),
        MemoryDep('buf180', c0, {c0: 196608})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (256, 768)
op181.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf180_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op181_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_4, getitem)
        return store_reduction


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 256})]
op182.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608}),
        MemoryDep('buf180', c0, {c0: 196608})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (256, 768)
op182.sizes = ([256], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf180_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op182_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_4, getitem_1)
        return store_reduction


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 196608})]
op184.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608}),
        MemoryDep('buf180', c0, {c0: 196608}),
        MemoryDep('buf181', c0, {c0: 256}),
        MemoryDep('buf182', c0, {c0: 256})]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (196608, 1)
op184.sizes = ([256, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf180_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op184_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf181', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf182', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf184', get_index_6, mul, None)
        return store


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1769472})]
op185.unmet_dependencies = []
op185.met_dependencies = [MemoryDep('primals_47', c0, {c0: 1769472})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf185.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (1769472, 1)
op185.sizes = ([1769472], [])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf185_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op185_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, to_dtype, None)
        return store


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 196608})]
op186.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 196608})]
op186.met_dependencies = [MemoryDep('primals_46', c1, {c0: 256, c1: 768})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf186.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op186.group.device = cuda:0
op186.group.iteration = (196608, 1)
op186.sizes = ([256, 768], [])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf186_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op186_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf186', get_index_2, to_dtype, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf185', mode=None), StarDep(name='buf186', mode=None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.node.kernel = extern_kernels.mm


op188: ExternKernelSchedulerNode(FallbackKernel)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: FallbackKernel
    buf188.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
]
op188.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op189: ExternKernelSchedulerNode(MultiOutput)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: MultiOutput
    buf189.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op189.node.kernel = None


op190: ExternKernelSchedulerNode(MultiOutput)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: MultiOutput
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf190.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op190.node.kernel = None


op191: ExternKernelSchedulerNode(MultiOutput)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: MultiOutput
    buf191.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf191.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op191.node.kernel = None


op192: ExternKernelSchedulerNode(MultiOutput)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: MultiOutput
    buf192.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf192.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op192.node.kernel = None


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 589824})]
op194.unmet_dependencies = []
op194.met_dependencies = [MemoryDep('primals_48', c0, {c0: 589824})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (589824, 1)
op194.sizes = ([589824], [])
primals_48_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf194_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op194_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_48', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf194', get_index_1, to_dtype, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 196608})]
op196.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 196608}),
        MemoryDep('buf155', c0, {c0: 196608}),
        MemoryDep('buf170', c0, {c0: 196608}),
        MemoryDep('buf180', c0, {c0: 196608}),
        MemoryDep('buf195', c0, {c0: 196608})]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (196608, 1)
op196.sizes = ([196608], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf180_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf195_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op196_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf155', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf195', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_3, None)
        return store


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 256})]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 196608})]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf197.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (256, 768)
op197.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op197_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_1, getitem)
        return store_reduction


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 256})]
op198.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 196608})]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (256, 768)
op198.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op198_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf198', get_index_1, getitem_1)
        return store_reduction


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 196608})]
op200.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf197', c0, {c0: 256}),
        MemoryDep('buf198', c0, {c0: 256})]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (196608, 1)
op200.sizes = ([256, 768], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op200_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf200', get_index_3, mul, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2359296})]
op201.unmet_dependencies = []
op201.met_dependencies = [MemoryDep('primals_50', c0, {c0: 2359296})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf201.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (2359296, 1)
op201.sizes = ([2359296], [])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf201_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op201_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_50', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf201', get_index_1, to_dtype, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 196608})]
op202.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 196608})]
op202.met_dependencies = [MemoryDep('primals_49', c1, {c0: 256, c1: 768})]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (196608, 1)
op202.sizes = ([256, 768], [])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op202_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_49', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf202', get_index_2, to_dtype, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 2359296})]
op204.unmet_dependencies = []
op204.met_dependencies = [MemoryDep('primals_51', c0, {c0: 2359296})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (2359296, 1)
op204.sizes = ([2359296], [])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf204_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op204_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_51', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf204', get_index_1, to_dtype, None)
        return store


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 786432})]
op205.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 786432})]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (786432, 1)
op205.sizes = ([786432], [])
buf203_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf205_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op205_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf203', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf205', get_index_2, to_dtype_2, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None), StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op206.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 256})]
op207.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 196608}), MemoryDep('buf206', c0, {c0: 196608})]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (256, 768)
op207.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op207_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_2, getitem)
        return store_reduction


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 256})]
op208.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 196608}), MemoryDep('buf206', c0, {c0: 196608})]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (256, 768)
op208.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op208_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_2, getitem_1)
        return store_reduction


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 196608})]
op210.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf207', c0, {c0: 256}),
        MemoryDep('buf208', c0, {c0: 256})]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (196608, 1)
op210.sizes = ([256, 768], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op210_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf207', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf208', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf210', get_index_4, mul, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 1769472})]
op211.unmet_dependencies = []
op211.met_dependencies = [MemoryDep('primals_53', c0, {c0: 1769472})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (1769472, 1)
op211.sizes = ([1769472], [])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf211_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op211_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_53', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf211', get_index_1, to_dtype, None)
        return store


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 196608})]
op212.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 196608})]
op212.met_dependencies = [MemoryDep('primals_52', c1, {c0: 256, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (196608, 1)
op212.sizes = ([256, 768], [])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf212_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op212_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_52', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf212', get_index_2, to_dtype, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf211', mode=None), StarDep(name='buf212', mode=None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op213.node.kernel = extern_kernels.mm


op214: ExternKernelSchedulerNode(FallbackKernel)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: FallbackKernel
    buf214.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
    ]
]
op214.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op215: ExternKernelSchedulerNode(MultiOutput)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: MultiOutput
    buf215.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf215.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op215.node.kernel = None


op216: ExternKernelSchedulerNode(MultiOutput)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: MultiOutput
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf216.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op216.node.kernel = None


op217: ExternKernelSchedulerNode(MultiOutput)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: MultiOutput
    buf217.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf217.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op217.node.kernel = None


op218: ExternKernelSchedulerNode(MultiOutput)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: MultiOutput
    buf218.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf218.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op218.node.kernel = None


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 589824})]
op220.unmet_dependencies = []
op220.met_dependencies = [MemoryDep('primals_54', c0, {c0: 589824})]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf220.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (589824, 1)
op220.sizes = ([589824], [])
primals_54_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf220_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op220_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_54', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf220', get_index_1, to_dtype, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf220', mode=None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op221.node.kernel = extern_kernels.mm


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 256})]
op222.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608})]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (256, 768)
op222.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op222_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 256})]
op223.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608})]
op223.met_dependencies = []
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (256, 768)
op223.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op223_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_1)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 196608})]
op225.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608}),
        MemoryDep('buf222', c0, {c0: 256}),
        MemoryDep('buf223', c0, {c0: 256})]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op225.group.device = cuda:0
op225.group.iteration = (196608, 1)
op225.sizes = ([256, 768], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op225_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf222', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf223', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf225', get_index_5, mul, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 2359296})]
op226.unmet_dependencies = []
op226.met_dependencies = [MemoryDep('primals_56', c0, {c0: 2359296})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf226.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (2359296, 1)
op226.sizes = ([2359296], [])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf226_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op226_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_56', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf226', get_index_1, to_dtype, None)
        return store


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 196608})]
op227.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 196608})]
op227.met_dependencies = [MemoryDep('primals_55', c1, {c0: 256, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf227.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (196608, 1)
op227.sizes = ([256, 768], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op227_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_55', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf227', get_index_2, to_dtype, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 2359296})]
op229.unmet_dependencies = []
op229.met_dependencies = [MemoryDep('primals_57', c0, {c0: 2359296})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (2359296, 1)
op229.sizes = ([2359296], [])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf229_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op229_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_57', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf229', get_index_1, to_dtype, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 786432})]
op230.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 786432})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf230.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (786432, 1)
op230.sizes = ([786432], [])
buf228_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf230_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op230_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf230', get_index_2, to_dtype_2, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 256})]
op232.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608}),
        MemoryDep('buf231', c0, {c0: 196608})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (256, 768)
op232.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op232_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf231', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_4, getitem)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 256})]
op233.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608}),
        MemoryDep('buf231', c0, {c0: 196608})]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (256, 768)
op233.sizes = ([256], [768])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op233_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf231', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_4, getitem_1)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 196608})]
op235.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608}),
        MemoryDep('buf231', c0, {c0: 196608}),
        MemoryDep('buf232', c0, {c0: 256}),
        MemoryDep('buf233', c0, {c0: 256})]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (196608, 1)
op235.sizes = ([256, 768], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op235_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf231', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf232', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf233', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf235', get_index_6, mul, None)
        return store


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 1769472})]
op236.unmet_dependencies = []
op236.met_dependencies = [MemoryDep('primals_59', c0, {c0: 1769472})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (1769472, 1)
op236.sizes = ([1769472], [])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf236_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op236_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_59', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf236', get_index_1, to_dtype, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 196608})]
op237.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 196608})]
op237.met_dependencies = [MemoryDep('primals_58', c1, {c0: 256, c1: 768})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf237.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (196608, 1)
op237.sizes = ([256, 768], [])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf237_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op237_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_58', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf237', get_index_2, to_dtype, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf238.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op238.node.kernel = extern_kernels.mm


op239: ExternKernelSchedulerNode(FallbackKernel)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: FallbackKernel
    buf239.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op239.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op240: ExternKernelSchedulerNode(MultiOutput)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: MultiOutput
    buf240.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op240.node.kernel = None


op241: ExternKernelSchedulerNode(MultiOutput)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: MultiOutput
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf241.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op241.node.kernel = None


op242: ExternKernelSchedulerNode(MultiOutput)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: MultiOutput
    buf242.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf242.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op242.node.kernel = None


op243: ExternKernelSchedulerNode(MultiOutput)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: MultiOutput
    buf243.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf243.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op243.node.kernel = None


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 589824})]
op245.unmet_dependencies = []
op245.met_dependencies = [MemoryDep('primals_60', c0, {c0: 589824})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (589824, 1)
op245.sizes = ([589824], [])
primals_60_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf245_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op245_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_60', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf245', get_index_1, to_dtype, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf240', mode=None), StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 196608})]
op247.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 196608}),
        MemoryDep('buf206', c0, {c0: 196608}),
        MemoryDep('buf221', c0, {c0: 196608}),
        MemoryDep('buf231', c0, {c0: 196608}),
        MemoryDep('buf246', c0, {c0: 196608})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op247.group.device = cuda:0
op247.group.iteration = (196608, 1)
op247.sizes = ([196608], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf246_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op247_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf231', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf246', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, add_3, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 256})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 196608})]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf248.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (256, 768)
op248.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op248_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf248', get_index_1, getitem)
        return store_reduction


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 256})]
op249.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 196608})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (256, 768)
op249.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op249_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf249', get_index_1, getitem_1)
        return store_reduction


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 196608})]
op251.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf248', c0, {c0: 256}),
        MemoryDep('buf249', c0, {c0: 256})]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (196608, 1)
op251.sizes = ([256, 768], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op251_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf248', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf249', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf251', get_index_3, mul, None)
        return store


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 2359296})]
op252.unmet_dependencies = []
op252.met_dependencies = [MemoryDep('primals_62', c0, {c0: 2359296})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (2359296, 1)
op252.sizes = ([2359296], [])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf252_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op252_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_62', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, to_dtype, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 196608})]
op253.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 196608})]
op253.met_dependencies = [MemoryDep('primals_61', c1, {c0: 256, c1: 768})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (196608, 1)
op253.sizes = ([256, 768], [])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op253_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_61', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf253', get_index_2, to_dtype, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op254.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 2359296})]
op255.unmet_dependencies = []
op255.met_dependencies = [MemoryDep('primals_63', c0, {c0: 2359296})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf255.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (2359296, 1)
op255.sizes = ([2359296], [])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op255_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_63', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf255', get_index_1, to_dtype, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 786432})]
op256.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 786432})]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (786432, 1)
op256.sizes = ([786432], [])
buf254_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf256_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op256_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf256', get_index_2, to_dtype_2, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf255', mode=None), StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 256})]
op258.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 196608}), MemoryDep('buf257', c0, {c0: 196608})]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (256, 768)
op258.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op258_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf258', get_index_2, getitem)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 256})]
op259.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 196608}), MemoryDep('buf257', c0, {c0: 196608})]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (256, 768)
op259.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op259_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_2, getitem_1)
        return store_reduction


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 196608})]
op261.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf258', c0, {c0: 256}),
        MemoryDep('buf259', c0, {c0: 256})]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (196608, 1)
op261.sizes = ([256, 768], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op261_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf258', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf259', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf261', get_index_4, mul, None)
        return store


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 1769472})]
op262.unmet_dependencies = []
op262.met_dependencies = [MemoryDep('primals_65', c0, {c0: 1769472})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (1769472, 1)
op262.sizes = ([1769472], [])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf262_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op262_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_65', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf262', get_index_1, to_dtype, None)
        return store


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 196608})]
op263.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 196608})]
op263.met_dependencies = [MemoryDep('primals_64', c1, {c0: 256, c1: 768})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (196608, 1)
op263.sizes = ([256, 768], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op263_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_64', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, to_dtype, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf264.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op264.node.kernel = extern_kernels.mm


op265: ExternKernelSchedulerNode(FallbackKernel)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: FallbackKernel
    buf265.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op265.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op266: ExternKernelSchedulerNode(MultiOutput)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: MultiOutput
    buf266.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op266.node.kernel = None


op267: ExternKernelSchedulerNode(MultiOutput)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: MultiOutput
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf267.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op267.node.kernel = None


op268: ExternKernelSchedulerNode(MultiOutput)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: MultiOutput
    buf268.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf268.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op268.node.kernel = None


op269: ExternKernelSchedulerNode(MultiOutput)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: MultiOutput
    buf269.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf269.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op269.node.kernel = None


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 589824})]
op271.unmet_dependencies = []
op271.met_dependencies = [MemoryDep('primals_66', c0, {c0: 589824})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf271.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op271.group.device = cuda:0
op271.group.iteration = (589824, 1)
op271.sizes = ([589824], [])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf271_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op271_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_66', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf271', get_index_1, to_dtype, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 256})]
op273.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf273.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (256, 768)
op273.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op273_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf273', get_index_3, getitem)
        return store_reduction


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 256})]
op274.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608})]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (256, 768)
op274.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op274_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_3, getitem_1)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 196608})]
op276.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf273', c0, {c0: 256}),
        MemoryDep('buf274', c0, {c0: 256})]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (196608, 1)
op276.sizes = ([256, 768], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op276_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf273', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf274', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, mul, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 2359296})]
op277.unmet_dependencies = []
op277.met_dependencies = [MemoryDep('primals_68', c0, {c0: 2359296})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf277.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (2359296, 1)
op277.sizes = ([2359296], [])
primals_68_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf277_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op277_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_68', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf277', get_index_1, to_dtype, None)
        return store


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 196608})]
op278.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 196608})]
op278.met_dependencies = [MemoryDep('primals_67', c1, {c0: 256, c1: 768})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (196608, 1)
op278.sizes = ([256, 768], [])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf278_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op278_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_67', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf278', get_index_2, to_dtype, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf277', mode=None), StarDep(name='buf278', mode=None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf279.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op279.node.kernel = extern_kernels.mm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 2359296})]
op280.unmet_dependencies = []
op280.met_dependencies = [MemoryDep('primals_69', c0, {c0: 2359296})]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf280.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (2359296, 1)
op280.sizes = ([2359296], [])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf280_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op280_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_69', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf280', get_index_1, to_dtype, None)
        return store


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 786432})]
op281.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 786432})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf281.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (786432, 1)
op281.sizes = ([786432], [])
buf279_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf281_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op281_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf281', get_index_2, to_dtype_2, None)
        return store


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf280', mode=None), StarDep(name='buf281', mode=None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf282.users = [
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op282.node.kernel = extern_kernels.mm


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 256})]
op283.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf282', c0, {c0: 196608})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf283.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (256, 768)
op283.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op283_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf283', get_index_4, getitem)
        return store_reduction


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 256})]
op284.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf282', c0, {c0: 196608})]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (256, 768)
op284.sizes = ([256], [768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op284_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf284', get_index_4, getitem_1)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 196608})]
op286.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf282', c0, {c0: 196608}),
        MemoryDep('buf283', c0, {c0: 256}),
        MemoryDep('buf284', c0, {c0: 256})]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (196608, 1)
op286.sizes = ([256, 768], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op286_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf283', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf284', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf286', get_index_6, mul, None)
        return store


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 1769472})]
op287.unmet_dependencies = []
op287.met_dependencies = [MemoryDep('primals_71', c0, {c0: 1769472})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (1769472, 1)
op287.sizes = ([1769472], [])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf287_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 2304], stride=[1, 768])
class op287_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_71', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf287', get_index_1, to_dtype, None)
        return store


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 196608})]
op288.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 196608})]
op288.met_dependencies = [MemoryDep('primals_70', c1, {c0: 256, c1: 768})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf288.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op288.group.device = cuda:0
op288.group.iteration = (196608, 1)
op288.sizes = ([256, 768], [])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op288_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_70', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf288', get_index_2, to_dtype, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 2304], stride=[2304, 1])
    buf289.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op289.node.kernel = extern_kernels.mm


op290: ExternKernelSchedulerNode(FallbackKernel)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: FallbackKernel
    buf290.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf290.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
    ]
]
op290.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention.default


op291: ExternKernelSchedulerNode(MultiOutput)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: MultiOutput
    buf291.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf291.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op291.node.kernel = None


op292: ExternKernelSchedulerNode(MultiOutput)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: MultiOutput
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[4, 12, 64], stride=[768, 64, 1])
    buf292.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op292.node.kernel = None


op293: ExternKernelSchedulerNode(MultiOutput)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: MultiOutput
    buf293.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf293.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op293.node.kernel = None


op294: ExternKernelSchedulerNode(MultiOutput)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: MultiOutput
    buf294.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf294.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op294.node.kernel = None


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 589824})]
op296.unmet_dependencies = []
op296.met_dependencies = [MemoryDep('primals_72', c0, {c0: 589824})]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (589824, 1)
op296.sizes = ([589824], [])
primals_72_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf296_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[1, 768])
class op296_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_72', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf296', get_index_1, to_dtype, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf291', mode=None), StarDep(name='buf296', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 196608})]
op298.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf282', c0, {c0: 196608}),
        MemoryDep('buf297', c0, {c0: 196608})]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (196608, 1)
op298.sizes = ([196608], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf257_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf297_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op298_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        add_1 = ops.add(add, to_dtype_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        add_2 = ops.add(add_1, to_dtype_2)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf297', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        add_3 = ops.add(add_2, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf298', get_index_5, add_3, None)
        return store


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 256})]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 196608})]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (256, 768)
op299.sizes = ([256], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op299_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf299', get_index_1, getitem)
        return store_reduction


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 256})]
op300.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 196608})]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (256, 768)
op300.sizes = ([256], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op300_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, getitem_1)
        return store_reduction


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 196608})]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 196608}),
        MemoryDep('buf299', c0, {c0: 256}),
        MemoryDep('buf300', c0, {c0: 256})]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (196608, 1)
op302.sizes = ([256, 768], [])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op302_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf300', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf302', get_index_3, mul, None)
        return store


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 2359296})]
op303.unmet_dependencies = []
op303.met_dependencies = [MemoryDep('primals_74', c0, {c0: 2359296})]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
    buf303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (2359296, 1)
op303.sizes = ([2359296], [])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
buf303_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[1, 768])
class op303_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_74', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf303', get_index_1, to_dtype, None)
        return store


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 196608})]
op304.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 196608})]
op304.met_dependencies = [MemoryDep('primals_73', c1, {c0: 256, c1: 768})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf304.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op304.group.device = cuda:0
op304.group.iteration = (196608, 1)
op304.sizes = ([256, 768], [])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf304_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op304_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_73', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf304', get_index_2, to_dtype, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf303', mode=None), StarDep(name='buf304', mode=None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 2359296})]
op306.unmet_dependencies = []
op306.met_dependencies = [MemoryDep('primals_75', c0, {c0: 2359296})]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (2359296, 1)
op306.sizes = ([2359296], [])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
buf306_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[1, 3072])
class op306_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_75', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf306', get_index_1, to_dtype, None)
        return store


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 786432})]
op307.unmet_dependencies = [MemoryDep('buf305', c0, {c0: 786432})]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf307.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (786432, 1)
op307.sizes = ([786432], [])
buf305_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf307_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op307_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf305', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        to_dtype_2 = ops.to_dtype(mul_2, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf307', get_index_2, to_dtype_2, None)
        return store


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf306', mode=None), StarDep(name='buf307', mode=None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op308.node.kernel = extern_kernels.mm


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 256})]
op309.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 196608}), MemoryDep('buf308', c0, {c0: 196608})]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf309.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (256, 768)
op309.sizes = ([256], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op309_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_2, getitem)
        return store_reduction


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 256})]
op310.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 196608}), MemoryDep('buf308', c0, {c0: 196608})]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (256, 768)
op310.sizes = ([256], [768])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op310_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf310', get_index_2, getitem_1)
        return store_reduction


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 196608})]
op312.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 196608}),
        MemoryDep('buf308', c0, {c0: 196608}),
        MemoryDep('buf309', c0, {c0: 256}),
        MemoryDep('buf310', c0, {c0: 256})]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (196608, 1)
op312.sizes = ([256, 768], [])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op312_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf309', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf310', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf312', get_index_4, mul, None)
        return store


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 49920})]
op313.unmet_dependencies = []
op313.met_dependencies = [MemoryDep('primals_2', c0, {c0: 49920})]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 65], stride=[1, 768])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (49920, 1)
op313.sizes = ([49920], [])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
buf313_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 65], stride=[1, 768])
class op313_loop_body:
    var_ranges = {p0: 49920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf313', get_index_1, to_dtype, None)
        return store


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 196608})]
op314.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 196608})]
op314.met_dependencies = [MemoryDep('primals_76', c1, {c0: 256, c1: 768})]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
    buf314.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op314.group.device = cuda:0
op314.group.iteration = (196608, 1)
op314.sizes = ([256, 768], [])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf314_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 768], stride=[49152, 768, 1])
class op314_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_76', get_index_1)
        mul = ops.mul(load, load_1)
        to_dtype = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf314', get_index_2, to_dtype, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf313', mode=None), StarDep(name='buf314', mode=None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op315.node.kernel = extern_kernels.mm


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 256})]
op316.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 16640})]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (256, 65)
op316.sizes = ([256], [65])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
class op316_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = 65*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        reduction = ops.reduction(torch.float32, torch.float32, 'online_softmax_reduce', to_dtype)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf316', get_index_1, getitem)
        return store_reduction


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 256})]
op317.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 16640})]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (256, 65)
op317.sizes = ([256], [65])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
class op317_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = 65*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        reduction = ops.reduction(torch.float32, torch.float32, 'online_softmax_reduce', to_dtype)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf317', get_index_1, getitem_1)
        return store_reduction


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 256})]
op318.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 256})]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (256, 1)
op318.sizes = ([256], [])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
class op318_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        log = ops.log(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf318', get_index_1, log, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', 0, {})]
op319.unmet_dependencies = []
op319.met_dependencies = [MemoryDep('primals_77', c0, {c0: 256})]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (1, 256)
op319.sizes = ([], [256])
primals_77_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
buf319_layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
class op319_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_77', get_index)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf319', get_index_1, reduction)
        return store_reduction


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', 0, {})]
op320.unmet_dependencies = [MemoryDep('buf319', 0, {})]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (1, 1)
op320.sizes = ([], [])
buf319_layout = FixedLayout('cuda:0', torch.int64, size=[], stride=[])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op320_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf320', get_index_1, to_dtype, None)
        return store


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', 0, {})]
op321.unmet_dependencies = 
    [   MemoryDep('buf315', 65*c0 + tmp0, {c0: 256}),
        MemoryDep('buf316', c0, {c0: 256}),
        MemoryDep('buf318', c0, {c0: 256})]
op321.met_dependencies = [MemoryDep('primals_77', c0, {c0: 256})]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf321.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (1, 256)
op321.sizes = ([], [256])
primals_77_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 65], stride=[65, 1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op321_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    index1 = indirect0 + 65*p0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_77', get_index)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_77', get_index_1)
        constant_1 = ops.constant(-1, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_77', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf315', get_index_3)
        to_dtype = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf316', get_index_4)
        sub = ops.sub(to_dtype, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf318', get_index_5)
        sub_1 = ops.sub(sub, load_5)
        to_dtype_1 = ops.to_dtype(sub_1, torch.bfloat16, src_dtype = torch.float32)
        to_dtype_2 = ops.to_dtype(to_dtype_1, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype_2)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf321', get_index_6, reduction)
        return store_reduction


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 256})]
op322.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 256})]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf322.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (256, 1)
op322.sizes = ([256], [])
buf310_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op322_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, mul, None)
        return store


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 256})]
op323.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 256})]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf323.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (256, 1)
op323.sizes = ([256], [])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op323_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf323', get_index_1, mul, None)
        return store


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 256})]
op324.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 256})]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf324.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (256, 1)
op324.sizes = ([256], [])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op324_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, mul, None)
        return store


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 256})]
op325.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 256})]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf325.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (256, 1)
op325.sizes = ([256], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op325_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, mul, None)
        return store


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 256})]
op326.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 256})]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf326.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (256, 1)
op326.sizes = ([256], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op326_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf326', get_index_1, mul, None)
        return store


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 256})]
op327.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 256})]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf327.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (256, 1)
op327.sizes = ([256], [])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op327_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf327', get_index_1, mul, None)
        return store


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 256})]
op328.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 256})]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf328.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (256, 1)
op328.sizes = ([256], [])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op328_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf328', get_index_1, mul, None)
        return store


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 256})]
op329.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 256})]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf329.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (256, 1)
op329.sizes = ([256], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op329_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf329', get_index_1, mul, None)
        return store


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 256})]
op330.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 256})]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf330.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (256, 1)
op330.sizes = ([256], [])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op330_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, mul, None)
        return store


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 256})]
op331.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 256})]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf331.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (256, 1)
op331.sizes = ([256], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op331_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf331', get_index_1, mul, None)
        return store


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 256})]
op332.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 256})]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf332.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (256, 1)
op332.sizes = ([256], [])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op332_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, mul, None)
        return store


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 256})]
op333.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 256})]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf333.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (256, 1)
op333.sizes = ([256], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op333_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf333', get_index_1, mul, None)
        return store


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 256})]
op334.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 256})]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf334.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (256, 1)
op334.sizes = ([256], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op334_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf334', get_index_1, mul, None)
        return store


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 256})]
op335.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 256})]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf335.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (256, 1)
op335.sizes = ([256], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op335_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf335', get_index_1, mul, None)
        return store


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 256})]
op336.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 256})]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf336.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (256, 1)
op336.sizes = ([256], [])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op336_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf336', get_index_1, mul, None)
        return store


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 256})]
op337.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 256})]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf337.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (256, 1)
op337.sizes = ([256], [])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op337_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf337', get_index_1, mul, None)
        return store


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 256})]
op338.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 256})]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf338.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (256, 1)
op338.sizes = ([256], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op338_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, mul, None)
        return store


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 256})]
op339.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 256})]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf339.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (256, 1)
op339.sizes = ([256], [])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf339_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op339_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf339', get_index_1, mul, None)
        return store


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 256})]
op340.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 256})]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf340.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (256, 1)
op340.sizes = ([256], [])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf340_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op340_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf340', get_index_1, mul, None)
        return store


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 256})]
op341.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 256})]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf341.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (256, 1)
op341.sizes = ([256], [])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf341_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op341_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf341', get_index_1, mul, None)
        return store


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 256})]
op342.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 256})]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf342.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (256, 1)
op342.sizes = ([256], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op342_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf342', get_index_1, mul, None)
        return store


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 256})]
op343.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 256})]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf343.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (256, 1)
op343.sizes = ([256], [])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf343_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op343_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf343', get_index_1, mul, None)
        return store


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 256})]
op344.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 256})]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf344.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (256, 1)
op344.sizes = ([256], [])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf344_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op344_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf344', get_index_1, mul, None)
        return store


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 256})]
op345.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 256})]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
    buf345.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (256, 1)
op345.sizes = ([256], [])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf345_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
class op345_loop_body:
    var_ranges = {p0: 256}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf345', get_index_1, mul, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', 0, {})]
op346.unmet_dependencies = [MemoryDep('buf320', 0, {}), MemoryDep('buf321', 0, {})]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf346.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (1, 1)
op346.sizes = ([], [])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op346_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf320', get_index_1)
        truediv = ops.truediv(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf346', get_index_2, truediv, None)
        return store


