op0_op1: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op0_op1.writes = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 16640})]
op0_op1.unmet_dependencies = []
op0_op1.met_dependencies = 
    [   MemoryDep('amax', c0, {c0: 256}),
        MemoryDep('convert_element_type_199', 0, {}),
        MemoryDep('log', c0, {c0: 256}),
        MemoryDep('primals_77', c0, {c0: 256}),
        MemoryDep('tangents_1', c0, {c0: 16640}),
        MemoryDep('tangents_2', 0, {}),
        MemoryDep('view_145', c0, {c0: 16640})]
op0_op1.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 65], stride=[4160, 65, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
    ]
]
op0_op1.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 256})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('convert_element_type_199', 0, {}),
        MemoryDep('primals_77', c0, {c0: 256}),
        MemoryDep('tangents_2', 0, {})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (256, 65)
op0.sizes = ([256], [65])
primals_77_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
convert_element_type_199_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
class op0_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = p0
    index1 = p1
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_77', get_index)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_77', get_index_1)
        constant_1 = ops.constant(0, torch.int64)
        where = ops.where(ne, load_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        eq = ops.eq(where, index_expr)
        constant_2 = ops.constant(-1.0, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq, constant_2, constant_3)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('primals_77', get_index_3)
        constant_4 = ops.constant(-1, torch.int64)
        ne_1 = ops.ne(load_2, constant_4)
        get_index_4 = self.get_index('index2')
        load_3 = ops.load('tangents_2', get_index_4)
        get_index_5 = self.get_index('index2')
        load_4 = ops.load('convert_element_type_199', get_index_5)
        truediv = ops.truediv(load_3, load_4)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ne_1, truediv, constant_5)
        mul = ops.mul(where_1, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_6 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_6, reduction)
        return store_reduction
op0_op1.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 16640})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]
op1.met_dependencies = 
    [   MemoryDep('amax', c0, {c0: 256}),
        MemoryDep('convert_element_type_199', 0, {}),
        MemoryDep('log', c0, {c0: 256}),
        MemoryDep('primals_77', c0, {c0: 256}),
        MemoryDep('tangents_1', c0, {c0: 16640}),
        MemoryDep('tangents_2', 0, {}),
        MemoryDep('view_145', c0, {c0: 16640})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 65], stride=[4160, 65, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (16640, 1)
op1.sizes = ([256, 65], [])
tangents_1_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 65], stride=[4160, 65, 1])
primals_77_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
tangents_2_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
convert_element_type_199_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
view_145_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 65], stride=[4160, 65, 1])
amax_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
log_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1], stride=[1, 256])
buf1_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 65], stride=[4160, 65, 1])
class op1_loop_body:
    var_ranges = {p0: 256, p1: 65}
    index0 = 65*p0 + p1
    index1 = p0
    index2 = p1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_77', get_index_1)
        constant = ops.constant(-1, torch.int64)
        ne = ops.ne(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_77', get_index_2)
        constant_1 = ops.constant(0, torch.int64)
        where = ops.where(ne, load_2, constant_1)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        eq = ops.eq(where, index_expr)
        constant_2 = ops.constant(-1.0, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq, constant_2, constant_3)
        get_index_4 = self.get_index('index1')
        load_3 = ops.load('primals_77', get_index_4)
        constant_4 = ops.constant(-1, torch.int64)
        ne_1 = ops.ne(load_3, constant_4)
        get_index_5 = self.get_index('index3')
        load_4 = ops.load('tangents_2', get_index_5)
        get_index_6 = self.get_index('index3')
        load_5 = ops.load('convert_element_type_199', get_index_6)
        truediv = ops.truediv(load_4, load_5)
        constant_5 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ne_1, truediv, constant_5)
        mul = ops.mul(where_1, where_2)
        get_index_7 = self.get_index('index0')
        load_6 = ops.load('view_145', get_index_7)
        to_dtype = ops.to_dtype(load_6, torch.float32, src_dtype = torch.bfloat16)
        get_index_8 = self.get_index('index1')
        load_7 = ops.load('amax', get_index_8)
        sub = ops.sub(to_dtype, load_7)
        get_index_9 = self.get_index('index1')
        load_8 = ops.load('log', get_index_9)
        sub_1 = ops.sub(sub, load_8)
        to_dtype_1 = ops.to_dtype(sub_1, torch.bfloat16, src_dtype = torch.float32)
        to_dtype_2 = ops.to_dtype(to_dtype_1, torch.float32, src_dtype = torch.bfloat16)
        exp = ops.exp(to_dtype_2)
        get_index_10 = self.get_index('index1')
        load_9 = ops.load('buf0', get_index_10)
        mul_1 = ops.mul(exp, load_9)
        sub_2 = ops.sub(mul, mul_1)
        to_dtype_3 = ops.to_dtype(sub_2, torch.bfloat16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype_3)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf1', get_index_11, add, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='view_144', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda:0', torch.bfloat16, size=[65, 768], stride=[768, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.mm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 49152})]
op369.unmet_dependencies = []
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (49152, 1)
op369.sizes = ([49152], [])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
class op369_loop_body:
    var_ranges = {p0: 49152}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf369', get_index, constant, None)
        return store


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 49920})]
op371.unmet_dependencies = []
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (49920, 1)
op371.sizes = ([49920], [])
buf371_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
class op371_loop_body:
    var_ranges = {p0: 49920}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf371', get_index, constant, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op3.met_dependencies = [StarDep(name='permute_99', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
    ]
]
op3.node.kernel = extern_kernels.mm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1536})]
op7.unmet_dependencies = [MemoryDep('buf3', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op7.met_dependencies = [MemoryDep('mul_84', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1536, 128)
op7.sizes = ([2, 768], [128])
buf3_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op7_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_84', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_2, reduction)
        return store_reduction


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 768})]
op8.unmet_dependencies = [MemoryDep('buf7', c0 + 768*c1, {c0: 768, c1: 2})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf8.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (768, 2)
op8.sizes = ([768], [2])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op8_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, reduction)
        return store_reduction


op4_op5_op6_op9: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op4_op5_op6_op9.writes = 
    [   MemoryDep('buf4', c0, {c0: 256}),
        MemoryDep('buf5', c0, {c0: 256}),
        MemoryDep('buf6', c0, {c0: 196608}),
        MemoryDep('buf9', c0, {c0: 196608})]
op4_op5_op6_op9.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 196608})]
op4_op5_op6_op9.met_dependencies = 
    [   MemoryDep('div_2', c0, {c0: 256}),
        MemoryDep('mul_84', c0, {c0: 196608}),
        MemoryDep('primals_76', c1, {c0: 256, c1: 768})]
op4_op5_op6_op9.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op4_op5_op6_op9.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 256})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 196608})]
op4.met_dependencies = [MemoryDep('primals_76', c1, {c0: 256, c1: 768})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (256, 768)
op4.sizes = ([256], [768])
buf3_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op4_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_76', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf4', get_index_2, reduction)
        return store_reduction
op4_op5_op6_op9.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 256})]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 196608})]
op5.met_dependencies = 
    [   MemoryDep('mul_84', c0, {c0: 196608}),
        MemoryDep('primals_76', c1, {c0: 256, c1: 768})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (256, 768)
op5.sizes = ([256], [768])
buf3_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op5_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_76', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_84', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf5', get_index_3, reduction)
        return store_reduction
op4_op5_op6_op9.snodes[2] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 196608})]
op6.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 196608}),
        MemoryDep('buf4', c0, {c0: 256}),
        MemoryDep('buf5', c0, {c0: 256})]
op6.met_dependencies = 
    [   MemoryDep('div_2', c0, {c0: 256}),
        MemoryDep('mul_84', c0, {c0: 196608}),
        MemoryDep('primals_76', c1, {c0: 256, c1: 768})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (196608, 1)
op6.sizes = ([256, 768], [])
div_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf3_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_84_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op6_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = p0
    index1 = 768*p0 + p1
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('div_2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_76', get_index_2)
        mul = ops.mul(to_dtype, load_2)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf4', get_index_3)
        sub = ops.sub(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('mul_84', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf5', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load, sub_1)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf6', get_index_6, mul_3, None)
        return store
op4_op5_op6_op9.snodes[3] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 196608})]
op9.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 196608})]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (196608, 1)
op9.sizes = ([196608], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf9_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op9_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf9', get_index_1, to_dtype, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op11.met_dependencies = [StarDep(name='permute_103', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op11.node.kernel = extern_kernels.mm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 786432})]
op13.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 786432})]
op13.met_dependencies = [MemoryDep('mm_46', c0, {c0: 786432})]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (786432, 1)
op13.sizes = ([786432], [])
buf11_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_46_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf13_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op13_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_46', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_46', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_46', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_46', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, to_dtype_5, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op15.met_dependencies = [StarDep(name='permute_107', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1536})]
op19.unmet_dependencies = [MemoryDep('buf15', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op19.met_dependencies = [MemoryDep('mul_79', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1536, 128)
op19.sizes = ([2, 768], [128])
buf15_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op19_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_79', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction


op17_op18_op21_op22: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op21_op22.writes = 
    [   MemoryDep('buf17', c0, {c0: 256}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf21', c0, {c0: 196608}),
        MemoryDep('buf22', c0, {c0: 196608})]
op17_op18_op21_op22.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 196608}), MemoryDep('buf6', c0, {c0: 196608})]
op17_op18_op21_op22.met_dependencies = 
    [   MemoryDep('div_3', c0, {c0: 256}),
        MemoryDep('mul_79', c0, {c0: 196608}),
        MemoryDep('primals_73', c1, {c0: 256, c1: 768})]
op17_op18_op21_op22.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf17.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op17_op18_op21_op22.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 256})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 196608})]
op17.met_dependencies = [MemoryDep('primals_73', c1, {c0: 256, c1: 768})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf17.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (256, 768)
op17.sizes = ([256], [768])
buf15_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op17_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_73', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_2, reduction)
        return store_reduction
op17_op18_op21_op22.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 256})]
op18.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 196608})]
op18.met_dependencies = 
    [   MemoryDep('mul_79', c0, {c0: 196608}),
        MemoryDep('primals_73', c1, {c0: 256, c1: 768})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (256, 768)
op18.sizes = ([256], [768])
buf15_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op18_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_73', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_79', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, reduction)
        return store_reduction
op17_op18_op21_op22.snodes[2] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 196608})]
op21.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 196608}),
        MemoryDep('buf17', c0, {c0: 256}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf6', c0, {c0: 196608})]
op21.met_dependencies = 
    [   MemoryDep('div_3', c0, {c0: 256}),
        MemoryDep('mul_79', c0, {c0: 196608}),
        MemoryDep('primals_73', c1, {c0: 256, c1: 768})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (196608, 1)
op21.sizes = ([256, 768], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_3_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf15_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_79_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_3', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_73', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf17', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_79', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf18', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf21', get_index_7, add, None)
        return store
op17_op18_op21_op22.snodes[3] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 196608})]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 196608})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (196608, 1)
op22.sizes = ([196608], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf22_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op22_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, to_dtype, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op24.met_dependencies = [StarDep(name='permute_111', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op26: ExternKernelSchedulerNode(FallbackKernel)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op26.met_dependencies = 
    [   StarDep(name='getitem_181', mode=None),
        StarDep(name='getitem_182', mode=None),
        StarDep(name='getitem_187', mode=None),
        StarDep(name='getitem_188', mode=None),
        StarDep(name='permute_89', mode=None),
        StarDep(name='permute_90', mode=None),
        StarDep(name='permute_91', mode=None)]
op26.outputs = [
    buf26: FallbackKernel
    buf26.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op26.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 768})]
op20.unmet_dependencies = [MemoryDep('buf19', c0 + 768*c1, {c0: 768, c1: 2})]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf20.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (768, 2)
op20.sizes = ([768], [2])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op20_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_1, reduction)
        return store_reduction


op27: ExternKernelSchedulerNode(MultiOutput)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: MultiOutput
    buf27.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = None


op28: ExternKernelSchedulerNode(MultiOutput)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: MultiOutput
    buf28.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = None


op29: ExternKernelSchedulerNode(MultiOutput)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: MultiOutput
    buf29.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = None


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 589824})]
op30.unmet_dependencies = 
    [   MemoryDep('buf27', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf28', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf29', 768*c0 + (I), {c0: 256, c1: 2304})]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (589824, 1)
op30.sizes = ([256, 2304], [])
buf27_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf28_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf29_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf30_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op30_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf30', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf27', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf28', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf29', get_index)
        return load


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op32.met_dependencies = [StarDep(name='permute_119', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1536})]
op36.unmet_dependencies = [MemoryDep('buf32', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op36.met_dependencies = [MemoryDep('mul_77', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1536, 128)
op36.sizes = ([2, 768], [128])
buf32_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op36_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_77', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_2, reduction)
        return store_reduction


op34_op35_op38_op39: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op34_op35_op38_op39.writes = 
    [   MemoryDep('buf34', c0, {c0: 256}),
        MemoryDep('buf35', c0, {c0: 256}),
        MemoryDep('buf38', c0, {c0: 196608}),
        MemoryDep('buf39', c0, {c0: 196608})]
op34_op35_op38_op39.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 196608}), MemoryDep('buf32', c0, {c0: 196608})]
op34_op35_op38_op39.met_dependencies = 
    [   MemoryDep('div_4', c0, {c0: 256}),
        MemoryDep('mul_77', c0, {c0: 196608}),
        MemoryDep('primals_70', c1, {c0: 256, c1: 768})]
op34_op35_op38_op39.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf34.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op34_op35_op38_op39.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 256})]
op34.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 196608})]
op34.met_dependencies = [MemoryDep('primals_70', c1, {c0: 256, c1: 768})]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf34.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (256, 768)
op34.sizes = ([256], [768])
buf32_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op34_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_70', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_2, reduction)
        return store_reduction
op34_op35_op38_op39.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 256})]
op35.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 196608})]
op35.met_dependencies = 
    [   MemoryDep('mul_77', c0, {c0: 196608}),
        MemoryDep('primals_70', c1, {c0: 256, c1: 768})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (256, 768)
op35.sizes = ([256], [768])
buf32_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op35_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_70', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_77', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_3, reduction)
        return store_reduction
op34_op35_op38_op39.snodes[2] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 196608})]
op38.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 196608}),
        MemoryDep('buf32', c0, {c0: 196608}),
        MemoryDep('buf34', c0, {c0: 256}),
        MemoryDep('buf35', c0, {c0: 256})]
op38.met_dependencies = 
    [   MemoryDep('div_4', c0, {c0: 256}),
        MemoryDep('mul_77', c0, {c0: 196608}),
        MemoryDep('primals_70', c1, {c0: 256, c1: 768})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (196608, 1)
op38.sizes = ([256, 768], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_4_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf32_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op38_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_4', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_70', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf34', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_77', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf35', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf38', get_index_7, add, None)
        return store
op34_op35_op38_op39.snodes[3] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 196608})]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 196608})]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (196608, 1)
op39.sizes = ([196608], [])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf39_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op39_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf39', get_index_1, to_dtype, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op41.met_dependencies = [StarDep(name='permute_123', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 786432})]
op43.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 786432})]
op43.met_dependencies = [MemoryDep('mm_42', c0, {c0: 786432})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (786432, 1)
op43.sizes = ([786432], [])
buf41_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_42_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf43_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op43_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_42', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_42', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_42', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_42', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, to_dtype_5, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op45.met_dependencies = [StarDep(name='permute_127', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op45.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 768})]
op37.unmet_dependencies = [MemoryDep('buf36', c0 + 768*c1, {c0: 768, c1: 2})]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf37.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (768, 2)
op37.sizes = ([768], [2])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op37_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_1, reduction)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 1536})]
op49.unmet_dependencies = [MemoryDep('buf45', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op49.met_dependencies = [MemoryDep('mul_72', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1536, 128)
op49.sizes = ([2, 768], [128])
buf45_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op49_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_72', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_2, reduction)
        return store_reduction


op47_op48_op51_op52: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op47_op48_op51_op52.writes = 
    [   MemoryDep('buf47', c0, {c0: 256}),
        MemoryDep('buf48', c0, {c0: 256}),
        MemoryDep('buf51', c0, {c0: 196608}),
        MemoryDep('buf52', c0, {c0: 196608})]
op47_op48_op51_op52.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 196608}), MemoryDep('buf45', c0, {c0: 196608})]
op47_op48_op51_op52.met_dependencies = 
    [   MemoryDep('div_5', c0, {c0: 256}),
        MemoryDep('mul_72', c0, {c0: 196608}),
        MemoryDep('primals_67', c1, {c0: 256, c1: 768})]
op47_op48_op51_op52.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf47.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op47_op48_op51_op52.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 256})]
op47.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 196608})]
op47.met_dependencies = [MemoryDep('primals_67', c1, {c0: 256, c1: 768})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf47.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (256, 768)
op47.sizes = ([256], [768])
buf45_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op47_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_67', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_2, reduction)
        return store_reduction
op47_op48_op51_op52.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 256})]
op48.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 196608})]
op48.met_dependencies = 
    [   MemoryDep('mul_72', c0, {c0: 196608}),
        MemoryDep('primals_67', c1, {c0: 256, c1: 768})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (256, 768)
op48.sizes = ([256], [768])
buf45_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op48_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_67', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_72', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_3, reduction)
        return store_reduction
op47_op48_op51_op52.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 196608})]
op51.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 196608}),
        MemoryDep('buf45', c0, {c0: 196608}),
        MemoryDep('buf47', c0, {c0: 256}),
        MemoryDep('buf48', c0, {c0: 256})]
op51.met_dependencies = 
    [   MemoryDep('div_5', c0, {c0: 256}),
        MemoryDep('mul_72', c0, {c0: 196608}),
        MemoryDep('primals_67', c1, {c0: 256, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (196608, 1)
op51.sizes = ([256, 768], [])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_5_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf45_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_72_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op51_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_5', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_67', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf47', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_72', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf48', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf51', get_index_7, add, None)
        return store
op47_op48_op51_op52.snodes[3] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 196608})]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 196608})]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (196608, 1)
op52.sizes = ([196608], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf52_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op52_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf52', get_index_1, to_dtype, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op54.met_dependencies = [StarDep(name='permute_131', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op56: ExternKernelSchedulerNode(FallbackKernel)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op56.met_dependencies = 
    [   StarDep(name='getitem_165', mode=None),
        StarDep(name='getitem_166', mode=None),
        StarDep(name='getitem_171', mode=None),
        StarDep(name='getitem_172', mode=None),
        StarDep(name='permute_81', mode=None),
        StarDep(name='permute_82', mode=None),
        StarDep(name='permute_83', mode=None)]
op56.outputs = [
    buf56: FallbackKernel
    buf56.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op56.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 768})]
op50.unmet_dependencies = [MemoryDep('buf49', c0 + 768*c1, {c0: 768, c1: 2})]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf50.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (768, 2)
op50.sizes = ([768], [2])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op50_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, reduction)
        return store_reduction


op57: ExternKernelSchedulerNode(MultiOutput)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: MultiOutput
    buf57.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = None


op58: ExternKernelSchedulerNode(MultiOutput)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: MultiOutput
    buf58.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = None


op59: ExternKernelSchedulerNode(MultiOutput)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: MultiOutput
    buf59.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = None


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 589824})]
op60.unmet_dependencies = 
    [   MemoryDep('buf57', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf58', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf59', 768*c0 + (I), {c0: 256, c1: 2304})]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (589824, 1)
op60.sizes = ([256, 2304], [])
buf57_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op60_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf60', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf57', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf59', get_index)
        return load


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op62.met_dependencies = [StarDep(name='permute_139', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1536})]
op66.unmet_dependencies = [MemoryDep('buf62', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op66.met_dependencies = [MemoryDep('mul_70', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (1536, 128)
op66.sizes = ([2, 768], [128])
buf62_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op66_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_70', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf66', get_index_2, reduction)
        return store_reduction


op64_op65_op68_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op64_op65_op68_op69.writes = 
    [   MemoryDep('buf64', c0, {c0: 256}),
        MemoryDep('buf65', c0, {c0: 256}),
        MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf69', c0, {c0: 196608})]
op64_op65_op68_op69.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 196608}), MemoryDep('buf62', c0, {c0: 196608})]
op64_op65_op68_op69.met_dependencies = 
    [   MemoryDep('div_6', c0, {c0: 256}),
        MemoryDep('mul_70', c0, {c0: 196608}),
        MemoryDep('primals_64', c1, {c0: 256, c1: 768})]
op64_op65_op68_op69.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf64.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op64_op65_op68_op69.snodes[0] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 256})]
op64.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 196608})]
op64.met_dependencies = [MemoryDep('primals_64', c1, {c0: 256, c1: 768})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf64.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (256, 768)
op64.sizes = ([256], [768])
buf62_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op64_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_64', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_2, reduction)
        return store_reduction
op64_op65_op68_op69.snodes[1] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 256})]
op65.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 196608})]
op65.met_dependencies = 
    [   MemoryDep('mul_70', c0, {c0: 196608}),
        MemoryDep('primals_64', c1, {c0: 256, c1: 768})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (256, 768)
op65.sizes = ([256], [768])
buf62_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op65_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_64', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_70', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, reduction)
        return store_reduction
op64_op65_op68_op69.snodes[2] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 196608})]
op68.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 196608}),
        MemoryDep('buf62', c0, {c0: 196608}),
        MemoryDep('buf64', c0, {c0: 256}),
        MemoryDep('buf65', c0, {c0: 256})]
op68.met_dependencies = 
    [   MemoryDep('div_6', c0, {c0: 256}),
        MemoryDep('mul_70', c0, {c0: 196608}),
        MemoryDep('primals_64', c1, {c0: 256, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (196608, 1)
op68.sizes = ([256, 768], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_6_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf62_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_70_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op68_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_6', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_64', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf64', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_70', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf65', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add, None)
        return store
op64_op65_op68_op69.snodes[3] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 196608})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 196608})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (196608, 1)
op69.sizes = ([196608], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op69_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf69', get_index_1, to_dtype, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op71.met_dependencies = [StarDep(name='permute_143', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 786432})]
op73.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 786432})]
op73.met_dependencies = [MemoryDep('mm_38', c0, {c0: 786432})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (786432, 1)
op73.sizes = ([786432], [])
buf71_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_38_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf73_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op73_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_38', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_38', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_38', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_38', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, to_dtype_5, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op75.met_dependencies = [StarDep(name='permute_147', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 768})]
op67.unmet_dependencies = [MemoryDep('buf66', c0 + 768*c1, {c0: 768, c1: 2})]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf67.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (768, 2)
op67.sizes = ([768], [2])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op67_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_1, reduction)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1536})]
op79.unmet_dependencies = [MemoryDep('buf75', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op79.met_dependencies = [MemoryDep('mul_65', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1536, 128)
op79.sizes = ([2, 768], [128])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op79_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_65', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_2, reduction)
        return store_reduction


op77_op78_op81_op82: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op77_op78_op81_op82.writes = 
    [   MemoryDep('buf77', c0, {c0: 256}),
        MemoryDep('buf78', c0, {c0: 256}),
        MemoryDep('buf81', c0, {c0: 196608}),
        MemoryDep('buf82', c0, {c0: 196608})]
op77_op78_op81_op82.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 196608}), MemoryDep('buf75', c0, {c0: 196608})]
op77_op78_op81_op82.met_dependencies = 
    [   MemoryDep('div_7', c0, {c0: 256}),
        MemoryDep('mul_65', c0, {c0: 196608}),
        MemoryDep('primals_61', c1, {c0: 256, c1: 768})]
op77_op78_op81_op82.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf77.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op77_op78_op81_op82.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 256})]
op77.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 196608})]
op77.met_dependencies = [MemoryDep('primals_61', c1, {c0: 256, c1: 768})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf77.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (256, 768)
op77.sizes = ([256], [768])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op77_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_61', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction
op77_op78_op81_op82.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 256})]
op78.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 196608})]
op78.met_dependencies = 
    [   MemoryDep('mul_65', c0, {c0: 196608}),
        MemoryDep('primals_61', c1, {c0: 256, c1: 768})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (256, 768)
op78.sizes = ([256], [768])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op78_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_61', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_65', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf78', get_index_3, reduction)
        return store_reduction
op77_op78_op81_op82.snodes[2] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 196608})]
op81.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 196608}),
        MemoryDep('buf75', c0, {c0: 196608}),
        MemoryDep('buf77', c0, {c0: 256}),
        MemoryDep('buf78', c0, {c0: 256})]
op81.met_dependencies = 
    [   MemoryDep('div_7', c0, {c0: 256}),
        MemoryDep('mul_65', c0, {c0: 196608}),
        MemoryDep('primals_61', c1, {c0: 256, c1: 768})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (196608, 1)
op81.sizes = ([256, 768], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf75_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_65_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op81_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_7', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf75', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_61', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf77', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_65', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf78', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf81', get_index_7, add, None)
        return store
op77_op78_op81_op82.snodes[3] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 196608})]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 196608})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (196608, 1)
op82.sizes = ([196608], [])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf82_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op82_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf82', get_index_1, to_dtype, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op84.met_dependencies = [StarDep(name='permute_151', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.node.kernel = extern_kernels.mm


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op86.met_dependencies = 
    [   StarDep(name='getitem_149', mode=None),
        StarDep(name='getitem_150', mode=None),
        StarDep(name='getitem_155', mode=None),
        StarDep(name='getitem_156', mode=None),
        StarDep(name='permute_73', mode=None),
        StarDep(name='permute_74', mode=None),
        StarDep(name='permute_75', mode=None)]
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 768})]
op80.unmet_dependencies = [MemoryDep('buf79', c0 + 768*c1, {c0: 768, c1: 2})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf80.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (768, 2)
op80.sizes = ([768], [2])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op80_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_1, reduction)
        return store_reduction


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = None


op88: ExternKernelSchedulerNode(MultiOutput)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: MultiOutput
    buf88.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = None


op89: ExternKernelSchedulerNode(MultiOutput)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: MultiOutput
    buf89.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = None


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 589824})]
op90.unmet_dependencies = 
    [   MemoryDep('buf87', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf88', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf89', 768*c0 + (I), {c0: 256, c1: 2304})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (589824, 1)
op90.sizes = ([256, 2304], [])
buf87_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf88_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf89_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf90_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op90_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf90', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf87', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf88', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf89', get_index)
        return load


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op92.met_dependencies = [StarDep(name='permute_159', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op92.node.kernel = extern_kernels.mm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1536})]
op96.unmet_dependencies = [MemoryDep('buf92', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op96.met_dependencies = [MemoryDep('mul_63', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1536, 128)
op96.sizes = ([2, 768], [128])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op96_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_63', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_2, reduction)
        return store_reduction


op94_op95_op98_op99: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op94_op95_op98_op99.writes = 
    [   MemoryDep('buf94', c0, {c0: 256}),
        MemoryDep('buf95', c0, {c0: 256}),
        MemoryDep('buf98', c0, {c0: 196608}),
        MemoryDep('buf99', c0, {c0: 196608})]
op94_op95_op98_op99.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 196608}), MemoryDep('buf92', c0, {c0: 196608})]
op94_op95_op98_op99.met_dependencies = 
    [   MemoryDep('div_8', c0, {c0: 256}),
        MemoryDep('mul_63', c0, {c0: 196608}),
        MemoryDep('primals_58', c1, {c0: 256, c1: 768})]
op94_op95_op98_op99.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf94.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op94_op95_op98_op99.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 256})]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 196608})]
op94.met_dependencies = [MemoryDep('primals_58', c1, {c0: 256, c1: 768})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf94.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (256, 768)
op94.sizes = ([256], [768])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op94_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_58', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_2, reduction)
        return store_reduction
op94_op95_op98_op99.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 256})]
op95.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 196608})]
op95.met_dependencies = 
    [   MemoryDep('mul_63', c0, {c0: 196608}),
        MemoryDep('primals_58', c1, {c0: 256, c1: 768})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (256, 768)
op95.sizes = ([256], [768])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op95_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_58', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_63', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, reduction)
        return store_reduction
op94_op95_op98_op99.snodes[2] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 196608})]
op98.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 196608}),
        MemoryDep('buf92', c0, {c0: 196608}),
        MemoryDep('buf94', c0, {c0: 256}),
        MemoryDep('buf95', c0, {c0: 256})]
op98.met_dependencies = 
    [   MemoryDep('div_8', c0, {c0: 256}),
        MemoryDep('mul_63', c0, {c0: 196608}),
        MemoryDep('primals_58', c1, {c0: 256, c1: 768})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (196608, 1)
op98.sizes = ([256, 768], [])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_8_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf92_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_63_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op98_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_8', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_58', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf94', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_63', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf95', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf98', get_index_7, add, None)
        return store
op94_op95_op98_op99.snodes[3] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 196608})]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 196608})]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (196608, 1)
op99.sizes = ([196608], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op99_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, to_dtype, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op101.met_dependencies = [StarDep(name='permute_163', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 786432})]
op103.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 786432})]
op103.met_dependencies = [MemoryDep('mm_34', c0, {c0: 786432})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (786432, 1)
op103.sizes = ([786432], [])
buf101_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_34_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf103_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op103_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_34', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_34', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_34', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_34', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, to_dtype_5, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='permute_167', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 768})]
op97.unmet_dependencies = [MemoryDep('buf96', c0 + 768*c1, {c0: 768, c1: 2})]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf97.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (768, 2)
op97.sizes = ([768], [2])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op97_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, reduction)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1536})]
op109.unmet_dependencies = [MemoryDep('buf105', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op109.met_dependencies = [MemoryDep('mul_58', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1536, 128)
op109.sizes = ([2, 768], [128])
buf105_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op109_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_58', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_2, reduction)
        return store_reduction


op107_op108_op111_op112: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op107_op108_op111_op112.writes = 
    [   MemoryDep('buf107', c0, {c0: 256}),
        MemoryDep('buf108', c0, {c0: 256}),
        MemoryDep('buf111', c0, {c0: 196608}),
        MemoryDep('buf112', c0, {c0: 196608})]
op107_op108_op111_op112.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 196608}), MemoryDep('buf98', c0, {c0: 196608})]
op107_op108_op111_op112.met_dependencies = 
    [   MemoryDep('div_9', c0, {c0: 256}),
        MemoryDep('mul_58', c0, {c0: 196608}),
        MemoryDep('primals_55', c1, {c0: 256, c1: 768})]
op107_op108_op111_op112.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf107.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
    ]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op107_op108_op111_op112.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 256})]
op107.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 196608})]
op107.met_dependencies = [MemoryDep('primals_55', c1, {c0: 256, c1: 768})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf107.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (256, 768)
op107.sizes = ([256], [768])
buf105_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op107_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_55', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_2, reduction)
        return store_reduction
op107_op108_op111_op112.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 256})]
op108.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 196608})]
op108.met_dependencies = 
    [   MemoryDep('mul_58', c0, {c0: 196608}),
        MemoryDep('primals_55', c1, {c0: 256, c1: 768})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (256, 768)
op108.sizes = ([256], [768])
buf105_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op108_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_55', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_58', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, reduction)
        return store_reduction
op107_op108_op111_op112.snodes[2] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 196608})]
op111.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 196608}),
        MemoryDep('buf107', c0, {c0: 256}),
        MemoryDep('buf108', c0, {c0: 256}),
        MemoryDep('buf98', c0, {c0: 196608})]
op111.met_dependencies = 
    [   MemoryDep('div_9', c0, {c0: 256}),
        MemoryDep('mul_58', c0, {c0: 196608}),
        MemoryDep('primals_55', c1, {c0: 256, c1: 768})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (196608, 1)
op111.sizes = ([256, 768], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_9_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf105_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_58_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op111_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_9', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_55', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf107', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_58', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf108', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf111', get_index_7, add, None)
        return store
op107_op108_op111_op112.snodes[3] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 196608})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 196608})]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (196608, 1)
op112.sizes = ([196608], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf112_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op112_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf112', get_index_1, to_dtype, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op114.met_dependencies = [StarDep(name='permute_171', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.mm


op116: ExternKernelSchedulerNode(FallbackKernel)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op116.met_dependencies = 
    [   StarDep(name='getitem_133', mode=None),
        StarDep(name='getitem_134', mode=None),
        StarDep(name='getitem_139', mode=None),
        StarDep(name='getitem_140', mode=None),
        StarDep(name='permute_65', mode=None),
        StarDep(name='permute_66', mode=None),
        StarDep(name='permute_67', mode=None)]
op116.outputs = [
    buf116: FallbackKernel
    buf116.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 768})]
op110.unmet_dependencies = [MemoryDep('buf109', c0 + 768*c1, {c0: 768, c1: 2})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf110.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (768, 2)
op110.sizes = ([768], [2])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op110_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_1, reduction)
        return store_reduction


op117: ExternKernelSchedulerNode(MultiOutput)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: MultiOutput
    buf117.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op117.node.kernel = None


op118: ExternKernelSchedulerNode(MultiOutput)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: MultiOutput
    buf118.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = None


op119: ExternKernelSchedulerNode(MultiOutput)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: MultiOutput
    buf119.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = None


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 589824})]
op120.unmet_dependencies = 
    [   MemoryDep('buf117', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf118', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf119', 768*c0 + (I), {c0: 256, c1: 2304})]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (589824, 1)
op120.sizes = ([256, 2304], [])
buf117_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf119_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf120_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op120_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf120', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf117', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf119', get_index)
        return load


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op122.met_dependencies = [StarDep(name='permute_179', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
    ]
]
op122.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1536})]
op126.unmet_dependencies = [MemoryDep('buf122', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op126.met_dependencies = [MemoryDep('mul_56', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (1536, 128)
op126.sizes = ([2, 768], [128])
buf122_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_56_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op126_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_56', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_2, reduction)
        return store_reduction


op124_op125_op128_op129: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op124_op125_op128_op129.writes = 
    [   MemoryDep('buf124', c0, {c0: 256}),
        MemoryDep('buf125', c0, {c0: 256}),
        MemoryDep('buf128', c0, {c0: 196608}),
        MemoryDep('buf129', c0, {c0: 196608})]
op124_op125_op128_op129.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 196608}), MemoryDep('buf122', c0, {c0: 196608})]
op124_op125_op128_op129.met_dependencies = 
    [   MemoryDep('div_10', c0, {c0: 256}),
        MemoryDep('mul_56', c0, {c0: 196608}),
        MemoryDep('primals_52', c1, {c0: 256, c1: 768})]
op124_op125_op128_op129.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf124.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
    ]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf129.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op124_op125_op128_op129.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 256})]
op124.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 196608})]
op124.met_dependencies = [MemoryDep('primals_52', c1, {c0: 256, c1: 768})]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf124.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (256, 768)
op124.sizes = ([256], [768])
buf122_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op124_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_52', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf124', get_index_2, reduction)
        return store_reduction
op124_op125_op128_op129.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 256})]
op125.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 196608})]
op125.met_dependencies = 
    [   MemoryDep('mul_56', c0, {c0: 196608}),
        MemoryDep('primals_52', c1, {c0: 256, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (256, 768)
op125.sizes = ([256], [768])
buf122_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_56_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op125_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_52', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_56', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, reduction)
        return store_reduction
op124_op125_op128_op129.snodes[2] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 196608})]
op128.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 196608}),
        MemoryDep('buf122', c0, {c0: 196608}),
        MemoryDep('buf124', c0, {c0: 256}),
        MemoryDep('buf125', c0, {c0: 256})]
op128.met_dependencies = 
    [   MemoryDep('div_10', c0, {c0: 256}),
        MemoryDep('mul_56', c0, {c0: 196608}),
        MemoryDep('primals_52', c1, {c0: 256, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (196608, 1)
op128.sizes = ([256, 768], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_10_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf122_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_56_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op128_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_10', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_52', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf124', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_56', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf125', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add, None)
        return store
op124_op125_op128_op129.snodes[3] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 196608})]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 196608})]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf129.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (196608, 1)
op129.sizes = ([196608], [])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op129_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf129', get_index_1, to_dtype, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op131.met_dependencies = [StarDep(name='permute_183', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 786432})]
op133.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 786432})]
op133.met_dependencies = [MemoryDep('mm_30', c0, {c0: 786432})]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (786432, 1)
op133.sizes = ([786432], [])
buf131_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_30_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf133_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op133_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_30', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_30', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_30', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_30', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf133', get_index_5, to_dtype_5, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op135.met_dependencies = [StarDep(name='permute_187', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
    ]
]
op135.node.kernel = extern_kernels.mm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 768})]
op127.unmet_dependencies = [MemoryDep('buf126', c0 + 768*c1, {c0: 768, c1: 2})]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf127.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (768, 2)
op127.sizes = ([768], [2])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op127_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf127', get_index_1, reduction)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 1536})]
op139.unmet_dependencies = [MemoryDep('buf135', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op139.met_dependencies = [MemoryDep('mul_51', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (1536, 128)
op139.sizes = ([2, 768], [128])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op139_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_51', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_2, reduction)
        return store_reduction


op137_op138_op141_op142: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op141_op142.writes = 
    [   MemoryDep('buf137', c0, {c0: 256}),
        MemoryDep('buf138', c0, {c0: 256}),
        MemoryDep('buf141', c0, {c0: 196608}),
        MemoryDep('buf142', c0, {c0: 196608})]
op137_op138_op141_op142.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 196608}), MemoryDep('buf135', c0, {c0: 196608})]
op137_op138_op141_op142.met_dependencies = 
    [   MemoryDep('div_11', c0, {c0: 256}),
        MemoryDep('mul_51', c0, {c0: 196608}),
        MemoryDep('primals_49', c1, {c0: 256, c1: 768})]
op137_op138_op141_op142.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf137.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op137_op138_op141_op142.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 256})]
op137.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 196608})]
op137.met_dependencies = [MemoryDep('primals_49', c1, {c0: 256, c1: 768})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf137.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (256, 768)
op137.sizes = ([256], [768])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op137_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_49', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_2, reduction)
        return store_reduction
op137_op138_op141_op142.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 256})]
op138.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 196608})]
op138.met_dependencies = 
    [   MemoryDep('mul_51', c0, {c0: 196608}),
        MemoryDep('primals_49', c1, {c0: 256, c1: 768})]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (256, 768)
op138.sizes = ([256], [768])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op138_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_49', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_51', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, reduction)
        return store_reduction
op137_op138_op141_op142.snodes[2] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 196608})]
op141.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 196608}),
        MemoryDep('buf135', c0, {c0: 196608}),
        MemoryDep('buf137', c0, {c0: 256}),
        MemoryDep('buf138', c0, {c0: 256})]
op141.met_dependencies = 
    [   MemoryDep('div_11', c0, {c0: 256}),
        MemoryDep('mul_51', c0, {c0: 196608}),
        MemoryDep('primals_49', c1, {c0: 256, c1: 768})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (196608, 1)
op141.sizes = ([256, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_11_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf135_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_51_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op141_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_11', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf135', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_49', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf137', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_51', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf138', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf141', get_index_7, add, None)
        return store
op137_op138_op141_op142.snodes[3] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 196608})]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 196608})]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (196608, 1)
op142.sizes = ([196608], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op142_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf142', get_index_1, to_dtype, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op144.met_dependencies = [StarDep(name='permute_191', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op146: ExternKernelSchedulerNode(FallbackKernel)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op146.met_dependencies = 
    [   StarDep(name='getitem_117', mode=None),
        StarDep(name='getitem_118', mode=None),
        StarDep(name='getitem_123', mode=None),
        StarDep(name='getitem_124', mode=None),
        StarDep(name='permute_57', mode=None),
        StarDep(name='permute_58', mode=None),
        StarDep(name='permute_59', mode=None)]
op146.outputs = [
    buf146: FallbackKernel
    buf146.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op146.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 768})]
op140.unmet_dependencies = [MemoryDep('buf139', c0 + 768*c1, {c0: 768, c1: 2})]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf140.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (768, 2)
op140.sizes = ([768], [2])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op140_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_1, reduction)
        return store_reduction


op147: ExternKernelSchedulerNode(MultiOutput)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: MultiOutput
    buf147.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = None


op148: ExternKernelSchedulerNode(MultiOutput)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: MultiOutput
    buf148.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = None


op149: ExternKernelSchedulerNode(MultiOutput)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: MultiOutput
    buf149.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = None


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 589824})]
op150.unmet_dependencies = 
    [   MemoryDep('buf147', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf148', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf149', 768*c0 + (I), {c0: 256, c1: 2304})]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf150.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (589824, 1)
op150.sizes = ([256, 2304], [])
buf147_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf148_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf150_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op150_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf150', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf149', get_index)
        return load


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op152.met_dependencies = [StarDep(name='permute_199', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op152.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 1536})]
op156.unmet_dependencies = [MemoryDep('buf152', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op156.met_dependencies = [MemoryDep('mul_49', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (1536, 128)
op156.sizes = ([2, 768], [128])
buf152_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_49', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_2, reduction)
        return store_reduction


op154_op155_op158_op159: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op154_op155_op158_op159.writes = 
    [   MemoryDep('buf154', c0, {c0: 256}),
        MemoryDep('buf155', c0, {c0: 256}),
        MemoryDep('buf158', c0, {c0: 196608}),
        MemoryDep('buf159', c0, {c0: 196608})]
op154_op155_op158_op159.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 196608}), MemoryDep('buf152', c0, {c0: 196608})]
op154_op155_op158_op159.met_dependencies = 
    [   MemoryDep('div_12', c0, {c0: 256}),
        MemoryDep('mul_49', c0, {c0: 196608}),
        MemoryDep('primals_46', c1, {c0: 256, c1: 768})]
op154_op155_op158_op159.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf154.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op154_op155_op158_op159.snodes[0] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 256})]
op154.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 196608})]
op154.met_dependencies = [MemoryDep('primals_46', c1, {c0: 256, c1: 768})]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf154.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (256, 768)
op154.sizes = ([256], [768])
buf152_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op154_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_2, reduction)
        return store_reduction
op154_op155_op158_op159.snodes[1] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 256})]
op155.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 196608})]
op155.met_dependencies = 
    [   MemoryDep('mul_49', c0, {c0: 196608}),
        MemoryDep('primals_46', c1, {c0: 256, c1: 768})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (256, 768)
op155.sizes = ([256], [768])
buf152_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op155_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_46', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_49', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_3, reduction)
        return store_reduction
op154_op155_op158_op159.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 196608})]
op158.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 196608}),
        MemoryDep('buf152', c0, {c0: 196608}),
        MemoryDep('buf154', c0, {c0: 256}),
        MemoryDep('buf155', c0, {c0: 256})]
op158.met_dependencies = 
    [   MemoryDep('div_12', c0, {c0: 256}),
        MemoryDep('mul_49', c0, {c0: 196608}),
        MemoryDep('primals_46', c1, {c0: 256, c1: 768})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (196608, 1)
op158.sizes = ([256, 768], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_12_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf152_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_49_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op158_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_46', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf154', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_49', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf155', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf158', get_index_7, add, None)
        return store
op154_op155_op158_op159.snodes[3] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 196608})]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 196608})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (196608, 1)
op159.sizes = ([196608], [])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf159_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op159_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf159', get_index_1, to_dtype, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op161.met_dependencies = [StarDep(name='permute_203', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 786432})]
op163.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 786432})]
op163.met_dependencies = [MemoryDep('mm_26', c0, {c0: 786432})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (786432, 1)
op163.sizes = ([786432], [])
buf161_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_26_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf163_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op163_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_26', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_26', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_26', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_26', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf163', get_index_5, to_dtype_5, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op165.met_dependencies = [StarDep(name='permute_207', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op165.node.kernel = extern_kernels.mm


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 768})]
op157.unmet_dependencies = [MemoryDep('buf156', c0 + 768*c1, {c0: 768, c1: 2})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf157.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (768, 2)
op157.sizes = ([768], [2])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op157_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, reduction)
        return store_reduction


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1536})]
op169.unmet_dependencies = [MemoryDep('buf165', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op169.met_dependencies = [MemoryDep('mul_44', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1536, 128)
op169.sizes = ([2, 768], [128])
buf165_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op169_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_44', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_2, reduction)
        return store_reduction


op167_op168_op171_op172: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op171_op172.writes = 
    [   MemoryDep('buf167', c0, {c0: 256}),
        MemoryDep('buf168', c0, {c0: 256}),
        MemoryDep('buf171', c0, {c0: 196608}),
        MemoryDep('buf172', c0, {c0: 196608})]
op167_op168_op171_op172.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 196608}), MemoryDep('buf165', c0, {c0: 196608})]
op167_op168_op171_op172.met_dependencies = 
    [   MemoryDep('div_13', c0, {c0: 256}),
        MemoryDep('mul_44', c0, {c0: 196608}),
        MemoryDep('primals_43', c1, {c0: 256, c1: 768})]
op167_op168_op171_op172.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf167.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf172.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op167_op168_op171_op172.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 256})]
op167.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 196608})]
op167.met_dependencies = [MemoryDep('primals_43', c1, {c0: 256, c1: 768})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf167.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (256, 768)
op167.sizes = ([256], [768])
buf165_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op167_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_43', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf167', get_index_2, reduction)
        return store_reduction
op167_op168_op171_op172.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 256})]
op168.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 196608})]
op168.met_dependencies = 
    [   MemoryDep('mul_44', c0, {c0: 196608}),
        MemoryDep('primals_43', c1, {c0: 256, c1: 768})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (256, 768)
op168.sizes = ([256], [768])
buf165_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op168_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_43', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_44', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf168', get_index_3, reduction)
        return store_reduction
op167_op168_op171_op172.snodes[2] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 196608})]
op171.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 196608}),
        MemoryDep('buf165', c0, {c0: 196608}),
        MemoryDep('buf167', c0, {c0: 256}),
        MemoryDep('buf168', c0, {c0: 256})]
op171.met_dependencies = 
    [   MemoryDep('div_13', c0, {c0: 256}),
        MemoryDep('mul_44', c0, {c0: 196608}),
        MemoryDep('primals_43', c1, {c0: 256, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (196608, 1)
op171.sizes = ([256, 768], [])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_13_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf165_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_44_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op171_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_13', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_43', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf167', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_44', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf168', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf171', get_index_7, add, None)
        return store
op167_op168_op171_op172.snodes[3] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 196608})]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 196608})]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf172.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (196608, 1)
op172.sizes = ([196608], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf172_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op172_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf172', get_index_1, to_dtype, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op174.met_dependencies = [StarDep(name='permute_211', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.mm


op176: ExternKernelSchedulerNode(FallbackKernel)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op176.met_dependencies = 
    [   StarDep(name='getitem_101', mode=None),
        StarDep(name='getitem_102', mode=None),
        StarDep(name='getitem_107', mode=None),
        StarDep(name='getitem_108', mode=None),
        StarDep(name='permute_49', mode=None),
        StarDep(name='permute_50', mode=None),
        StarDep(name='permute_51', mode=None)]
op176.outputs = [
    buf176: FallbackKernel
    buf176.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf176.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op176.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 768})]
op170.unmet_dependencies = [MemoryDep('buf169', c0 + 768*c1, {c0: 768, c1: 2})]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf170.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (768, 2)
op170.sizes = ([768], [2])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op170_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, reduction)
        return store_reduction


op177: ExternKernelSchedulerNode(MultiOutput)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: MultiOutput
    buf177.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op177.node.kernel = None


op178: ExternKernelSchedulerNode(MultiOutput)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: MultiOutput
    buf178.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = None


op179: ExternKernelSchedulerNode(MultiOutput)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: MultiOutput
    buf179.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = None


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 589824})]
op180.unmet_dependencies = 
    [   MemoryDep('buf177', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf178', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf179', 768*c0 + (I), {c0: 256, c1: 2304})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (589824, 1)
op180.sizes = ([256, 2304], [])
buf177_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf178_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf179_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf180_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op180_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf180', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf177', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf178', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf179', get_index)
        return load


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op182.met_dependencies = [StarDep(name='permute_219', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op182.node.kernel = extern_kernels.mm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 1536})]
op186.unmet_dependencies = [MemoryDep('buf182', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op186.met_dependencies = [MemoryDep('mul_42', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (1536, 128)
op186.sizes = ([2, 768], [128])
buf182_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op186_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_42', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf186', get_index_2, reduction)
        return store_reduction


op184_op185_op188_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op188_op189.writes = 
    [   MemoryDep('buf184', c0, {c0: 256}),
        MemoryDep('buf185', c0, {c0: 256}),
        MemoryDep('buf188', c0, {c0: 196608}),
        MemoryDep('buf189', c0, {c0: 196608})]
op184_op185_op188_op189.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 196608}), MemoryDep('buf182', c0, {c0: 196608})]
op184_op185_op188_op189.met_dependencies = 
    [   MemoryDep('div_14', c0, {c0: 256}),
        MemoryDep('mul_42', c0, {c0: 196608}),
        MemoryDep('primals_40', c1, {c0: 256, c1: 768})]
op184_op185_op188_op189.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf184.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
    ]
]
op184_op185_op188_op189.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 256})]
op184.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 196608})]
op184.met_dependencies = [MemoryDep('primals_40', c1, {c0: 256, c1: 768})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf184.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (256, 768)
op184.sizes = ([256], [768])
buf182_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op184_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_40', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_2, reduction)
        return store_reduction
op184_op185_op188_op189.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 256})]
op185.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 196608})]
op185.met_dependencies = 
    [   MemoryDep('mul_42', c0, {c0: 196608}),
        MemoryDep('primals_40', c1, {c0: 256, c1: 768})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (256, 768)
op185.sizes = ([256], [768])
buf182_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op185_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_40', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_42', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, reduction)
        return store_reduction
op184_op185_op188_op189.snodes[2] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 196608})]
op188.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 196608}),
        MemoryDep('buf182', c0, {c0: 196608}),
        MemoryDep('buf184', c0, {c0: 256}),
        MemoryDep('buf185', c0, {c0: 256})]
op188.met_dependencies = 
    [   MemoryDep('div_14', c0, {c0: 256}),
        MemoryDep('mul_42', c0, {c0: 196608}),
        MemoryDep('primals_40', c1, {c0: 256, c1: 768})]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (196608, 1)
op188.sizes = ([256, 768], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf182_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_42_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op188_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_14', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf182', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_40', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf184', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_42', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf185', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf188', get_index_7, add, None)
        return store
op184_op185_op188_op189.snodes[3] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 196608})]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 196608})]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (196608, 1)
op189.sizes = ([196608], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf189_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op189_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf189', get_index_1, to_dtype, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op191.met_dependencies = [StarDep(name='permute_223', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 786432})]
op193.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 786432})]
op193.met_dependencies = [MemoryDep('mm_22', c0, {c0: 786432})]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf193.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (786432, 1)
op193.sizes = ([786432], [])
buf191_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_22_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf193_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op193_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_22', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_22', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_22', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_22', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf193', get_index_5, to_dtype_5, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op195.met_dependencies = [StarDep(name='permute_227', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op195.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 768})]
op187.unmet_dependencies = [MemoryDep('buf186', c0 + 768*c1, {c0: 768, c1: 2})]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf187.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (768, 2)
op187.sizes = ([768], [2])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op187_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_1, reduction)
        return store_reduction


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1536})]
op199.unmet_dependencies = [MemoryDep('buf195', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op199.met_dependencies = [MemoryDep('mul_37', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1536, 128)
op199.sizes = ([2, 768], [128])
buf195_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op199_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_37', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf199', get_index_2, reduction)
        return store_reduction


op197_op198_op201_op202: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op197_op198_op201_op202.writes = 
    [   MemoryDep('buf197', c0, {c0: 256}),
        MemoryDep('buf198', c0, {c0: 256}),
        MemoryDep('buf201', c0, {c0: 196608}),
        MemoryDep('buf202', c0, {c0: 196608})]
op197_op198_op201_op202.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 196608}), MemoryDep('buf195', c0, {c0: 196608})]
op197_op198_op201_op202.met_dependencies = 
    [   MemoryDep('div_15', c0, {c0: 256}),
        MemoryDep('mul_37', c0, {c0: 196608}),
        MemoryDep('primals_37', c1, {c0: 256, c1: 768})]
op197_op198_op201_op202.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf197.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf198.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op197_op198_op201_op202.snodes[0] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 256})]
op197.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 196608})]
op197.met_dependencies = [MemoryDep('primals_37', c1, {c0: 256, c1: 768})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf197.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (256, 768)
op197.sizes = ([256], [768])
buf195_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op197_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_37', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf197', get_index_2, reduction)
        return store_reduction
op197_op198_op201_op202.snodes[1] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 256})]
op198.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 196608})]
op198.met_dependencies = 
    [   MemoryDep('mul_37', c0, {c0: 196608}),
        MemoryDep('primals_37', c1, {c0: 256, c1: 768})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf198.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (256, 768)
op198.sizes = ([256], [768])
buf195_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op198_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_37', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_37', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf198', get_index_3, reduction)
        return store_reduction
op197_op198_op201_op202.snodes[2] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 196608})]
op201.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 196608}),
        MemoryDep('buf195', c0, {c0: 196608}),
        MemoryDep('buf197', c0, {c0: 256}),
        MemoryDep('buf198', c0, {c0: 256})]
op201.met_dependencies = 
    [   MemoryDep('div_15', c0, {c0: 256}),
        MemoryDep('mul_37', c0, {c0: 196608}),
        MemoryDep('primals_37', c1, {c0: 256, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (196608, 1)
op201.sizes = ([256, 768], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_15_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf195_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_37_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op201_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_15', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_37', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf197', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_37', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf198', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf201', get_index_7, add, None)
        return store
op197_op198_op201_op202.snodes[3] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 196608})]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 196608})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (196608, 1)
op202.sizes = ([196608], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf202_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op202_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf202', get_index_1, to_dtype, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op204.met_dependencies = [StarDep(name='permute_231', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op206: ExternKernelSchedulerNode(FallbackKernel)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op206.met_dependencies = 
    [   StarDep(name='getitem_85', mode=None),
        StarDep(name='getitem_86', mode=None),
        StarDep(name='getitem_91', mode=None),
        StarDep(name='getitem_92', mode=None),
        StarDep(name='permute_41', mode=None),
        StarDep(name='permute_42', mode=None),
        StarDep(name='permute_43', mode=None)]
op206.outputs = [
    buf206: FallbackKernel
    buf206.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op206.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 768})]
op200.unmet_dependencies = [MemoryDep('buf199', c0 + 768*c1, {c0: 768, c1: 2})]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf200.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (768, 2)
op200.sizes = ([768], [2])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op200_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf200', get_index_1, reduction)
        return store_reduction


op207: ExternKernelSchedulerNode(MultiOutput)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: MultiOutput
    buf207.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = None


op208: ExternKernelSchedulerNode(MultiOutput)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: MultiOutput
    buf208.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = None


op209: ExternKernelSchedulerNode(MultiOutput)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: MultiOutput
    buf209.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = None


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 589824})]
op210.unmet_dependencies = 
    [   MemoryDep('buf207', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf208', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf209', 768*c0 + (I), {c0: 256, c1: 2304})]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf210.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (589824, 1)
op210.sizes = ([256, 2304], [])
buf207_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf208_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf209_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf210_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op210_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf210', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf208', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf209', get_index)
        return load


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op212.met_dependencies = [StarDep(name='permute_239', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op212.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1536})]
op216.unmet_dependencies = [MemoryDep('buf212', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op216.met_dependencies = [MemoryDep('mul_35', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1536, 128)
op216.sizes = ([2, 768], [128])
buf212_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op216_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_35', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf216', get_index_2, reduction)
        return store_reduction


op214_op215_op218_op219: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op214_op215_op218_op219.writes = 
    [   MemoryDep('buf214', c0, {c0: 256}),
        MemoryDep('buf215', c0, {c0: 256}),
        MemoryDep('buf218', c0, {c0: 196608}),
        MemoryDep('buf219', c0, {c0: 196608})]
op214_op215_op218_op219.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 196608}), MemoryDep('buf212', c0, {c0: 196608})]
op214_op215_op218_op219.met_dependencies = 
    [   MemoryDep('div_16', c0, {c0: 256}),
        MemoryDep('mul_35', c0, {c0: 196608}),
        MemoryDep('primals_34', c1, {c0: 256, c1: 768})]
op214_op215_op218_op219.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf214.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op214_op215_op218_op219.snodes[0] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 256})]
op214.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 196608})]
op214.met_dependencies = [MemoryDep('primals_34', c1, {c0: 256, c1: 768})]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf214.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (256, 768)
op214.sizes = ([256], [768])
buf212_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op214_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_34', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_2, reduction)
        return store_reduction
op214_op215_op218_op219.snodes[1] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 256})]
op215.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 196608})]
op215.met_dependencies = 
    [   MemoryDep('mul_35', c0, {c0: 196608}),
        MemoryDep('primals_34', c1, {c0: 256, c1: 768})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (256, 768)
op215.sizes = ([256], [768])
buf212_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op215_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_34', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_35', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_3, reduction)
        return store_reduction
op214_op215_op218_op219.snodes[2] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 196608})]
op218.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 196608}),
        MemoryDep('buf212', c0, {c0: 196608}),
        MemoryDep('buf214', c0, {c0: 256}),
        MemoryDep('buf215', c0, {c0: 256})]
op218.met_dependencies = 
    [   MemoryDep('div_16', c0, {c0: 256}),
        MemoryDep('mul_35', c0, {c0: 196608}),
        MemoryDep('primals_34', c1, {c0: 256, c1: 768})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (196608, 1)
op218.sizes = ([256, 768], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf212_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_35_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op218_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_16', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf212', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_34', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf214', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_35', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf215', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf218', get_index_7, add, None)
        return store
op214_op215_op218_op219.snodes[3] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 196608})]
op219.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 196608})]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (196608, 1)
op219.sizes = ([196608], [])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf219_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op219_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf219', get_index_1, to_dtype, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op221.met_dependencies = [StarDep(name='permute_243', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op221.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 786432})]
op223.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 786432})]
op223.met_dependencies = [MemoryDep('mm_18', c0, {c0: 786432})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf223.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (786432, 1)
op223.sizes = ([786432], [])
buf221_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_18_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf223_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op223_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_18', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_18', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_18', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_18', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, to_dtype_5, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op225.met_dependencies = [StarDep(name='permute_247', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 768})]
op217.unmet_dependencies = [MemoryDep('buf216', c0 + 768*c1, {c0: 768, c1: 2})]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf217.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (768, 2)
op217.sizes = ([768], [2])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op217_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf217', get_index_1, reduction)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1536})]
op229.unmet_dependencies = [MemoryDep('buf225', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op229.met_dependencies = [MemoryDep('mul_30', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (1536, 128)
op229.sizes = ([2, 768], [128])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op229_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_30', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_2, reduction)
        return store_reduction


op227_op228_op231_op232: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op227_op228_op231_op232.writes = 
    [   MemoryDep('buf227', c0, {c0: 256}),
        MemoryDep('buf228', c0, {c0: 256}),
        MemoryDep('buf231', c0, {c0: 196608}),
        MemoryDep('buf232', c0, {c0: 196608})]
op227_op228_op231_op232.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 196608}), MemoryDep('buf225', c0, {c0: 196608})]
op227_op228_op231_op232.met_dependencies = 
    [   MemoryDep('div_17', c0, {c0: 256}),
        MemoryDep('mul_30', c0, {c0: 196608}),
        MemoryDep('primals_31', c1, {c0: 256, c1: 768})]
op227_op228_op231_op232.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf227.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf228.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op227_op228_op231_op232.snodes[0] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 256})]
op227.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 196608})]
op227.met_dependencies = [MemoryDep('primals_31', c1, {c0: 256, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf227.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (256, 768)
op227.sizes = ([256], [768])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op227_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction
op227_op228_op231_op232.snodes[1] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 256})]
op228.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 196608})]
op228.met_dependencies = 
    [   MemoryDep('mul_30', c0, {c0: 196608}),
        MemoryDep('primals_31', c1, {c0: 256, c1: 768})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf228.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (256, 768)
op228.sizes = ([256], [768])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op228_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_30', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_3, reduction)
        return store_reduction
op227_op228_op231_op232.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 196608})]
op231.unmet_dependencies = 
    [   MemoryDep('buf218', c0, {c0: 196608}),
        MemoryDep('buf225', c0, {c0: 196608}),
        MemoryDep('buf227', c0, {c0: 256}),
        MemoryDep('buf228', c0, {c0: 256})]
op231.met_dependencies = 
    [   MemoryDep('div_17', c0, {c0: 256}),
        MemoryDep('mul_30', c0, {c0: 196608}),
        MemoryDep('primals_31', c1, {c0: 256, c1: 768})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (196608, 1)
op231.sizes = ([256, 768], [])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_17_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf225_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_30_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op231_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_17', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf225', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_31', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf227', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_30', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf228', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf231', get_index_7, add, None)
        return store
op227_op228_op231_op232.snodes[3] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 196608})]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 196608})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (196608, 1)
op232.sizes = ([196608], [])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf232_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op232_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf232', get_index_1, to_dtype, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op234.met_dependencies = [StarDep(name='permute_251', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.node.kernel = extern_kernels.mm


op236: ExternKernelSchedulerNode(FallbackKernel)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op236.met_dependencies = 
    [   StarDep(name='getitem_69', mode=None),
        StarDep(name='getitem_70', mode=None),
        StarDep(name='getitem_75', mode=None),
        StarDep(name='getitem_76', mode=None),
        StarDep(name='permute_33', mode=None),
        StarDep(name='permute_34', mode=None),
        StarDep(name='permute_35', mode=None)]
op236.outputs = [
    buf236: FallbackKernel
    buf236.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op236.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 768})]
op230.unmet_dependencies = [MemoryDep('buf229', c0 + 768*c1, {c0: 768, c1: 2})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf230.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (768, 2)
op230.sizes = ([768], [2])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op230_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_1, reduction)
        return store_reduction


op237: ExternKernelSchedulerNode(MultiOutput)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: MultiOutput
    buf237.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = None


op238: ExternKernelSchedulerNode(MultiOutput)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: MultiOutput
    buf238.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = None


op239: ExternKernelSchedulerNode(MultiOutput)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: MultiOutput
    buf239.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = None


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 589824})]
op240.unmet_dependencies = 
    [   MemoryDep('buf237', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf238', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf239', 768*c0 + (I), {c0: 256, c1: 2304})]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (589824, 1)
op240.sizes = ([256, 2304], [])
buf237_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf238_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf239_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf240_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op240_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf240', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf237', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf238', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf239', get_index)
        return load


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op242.met_dependencies = [StarDep(name='permute_259', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op242.node.kernel = extern_kernels.mm


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1536})]
op246.unmet_dependencies = [MemoryDep('buf242', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op246.met_dependencies = [MemoryDep('mul_28', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1536, 128)
op246.sizes = ([2, 768], [128])
buf242_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op246_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_28', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_2, reduction)
        return store_reduction


op244_op245_op248_op249: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op244_op245_op248_op249.writes = 
    [   MemoryDep('buf244', c0, {c0: 256}),
        MemoryDep('buf245', c0, {c0: 256}),
        MemoryDep('buf248', c0, {c0: 196608}),
        MemoryDep('buf249', c0, {c0: 196608})]
op244_op245_op248_op249.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 196608}), MemoryDep('buf242', c0, {c0: 196608})]
op244_op245_op248_op249.met_dependencies = 
    [   MemoryDep('div_18', c0, {c0: 256}),
        MemoryDep('mul_28', c0, {c0: 196608}),
        MemoryDep('primals_28', c1, {c0: 256, c1: 768})]
op244_op245_op248_op249.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf244.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op244_op245_op248_op249.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 256})]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 196608})]
op244.met_dependencies = [MemoryDep('primals_28', c1, {c0: 256, c1: 768})]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf244.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (256, 768)
op244.sizes = ([256], [768])
buf242_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op244_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_2, reduction)
        return store_reduction
op244_op245_op248_op249.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 256})]
op245.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 196608})]
op245.met_dependencies = 
    [   MemoryDep('mul_28', c0, {c0: 196608}),
        MemoryDep('primals_28', c1, {c0: 256, c1: 768})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (256, 768)
op245.sizes = ([256], [768])
buf242_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op245_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_28', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_28', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_3, reduction)
        return store_reduction
op244_op245_op248_op249.snodes[2] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 196608})]
op248.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 196608}),
        MemoryDep('buf242', c0, {c0: 196608}),
        MemoryDep('buf244', c0, {c0: 256}),
        MemoryDep('buf245', c0, {c0: 256})]
op248.met_dependencies = 
    [   MemoryDep('div_18', c0, {c0: 256}),
        MemoryDep('mul_28', c0, {c0: 196608}),
        MemoryDep('primals_28', c1, {c0: 256, c1: 768})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (196608, 1)
op248.sizes = ([256, 768], [])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_18_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf242_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_28_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op248_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_18', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_28', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf244', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_28', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf245', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf248', get_index_7, add, None)
        return store
op244_op245_op248_op249.snodes[3] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 196608})]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 196608})]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (196608, 1)
op249.sizes = ([196608], [])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op249_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf249', get_index_1, to_dtype, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op251.met_dependencies = [StarDep(name='permute_263', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 786432})]
op253.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 786432})]
op253.met_dependencies = [MemoryDep('mm_14', c0, {c0: 786432})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (786432, 1)
op253.sizes = ([786432], [])
buf251_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_14_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf253_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op253_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_14', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_14', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_14', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_14', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf253', get_index_5, to_dtype_5, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='permute_267', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 768})]
op247.unmet_dependencies = [MemoryDep('buf246', c0 + 768*c1, {c0: 768, c1: 2})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf247.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (768, 2)
op247.sizes = ([768], [2])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op247_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf247', get_index_1, reduction)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1536})]
op259.unmet_dependencies = [MemoryDep('buf255', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op259.met_dependencies = [MemoryDep('mul_23', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (1536, 128)
op259.sizes = ([2, 768], [128])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op259_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_23', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_2, reduction)
        return store_reduction


op257_op258_op261_op262: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op257_op258_op261_op262.writes = 
    [   MemoryDep('buf257', c0, {c0: 256}),
        MemoryDep('buf258', c0, {c0: 256}),
        MemoryDep('buf261', c0, {c0: 196608}),
        MemoryDep('buf262', c0, {c0: 196608})]
op257_op258_op261_op262.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 196608}), MemoryDep('buf255', c0, {c0: 196608})]
op257_op258_op261_op262.met_dependencies = 
    [   MemoryDep('div_19', c0, {c0: 256}),
        MemoryDep('mul_23', c0, {c0: 196608}),
        MemoryDep('primals_25', c1, {c0: 256, c1: 768})]
op257_op258_op261_op262.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf257.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op257_op258_op261_op262.snodes[0] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 256})]
op257.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 196608})]
op257.met_dependencies = [MemoryDep('primals_25', c1, {c0: 256, c1: 768})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf257.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (256, 768)
op257.sizes = ([256], [768])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op257_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_25', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_2, reduction)
        return store_reduction
op257_op258_op261_op262.snodes[1] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 256})]
op258.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 196608})]
op258.met_dependencies = 
    [   MemoryDep('mul_23', c0, {c0: 196608}),
        MemoryDep('primals_25', c1, {c0: 256, c1: 768})]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (256, 768)
op258.sizes = ([256], [768])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op258_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_25', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_23', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, reduction)
        return store_reduction
op257_op258_op261_op262.snodes[2] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 196608})]
op261.unmet_dependencies = 
    [   MemoryDep('buf248', c0, {c0: 196608}),
        MemoryDep('buf255', c0, {c0: 196608}),
        MemoryDep('buf257', c0, {c0: 256}),
        MemoryDep('buf258', c0, {c0: 256})]
op261.met_dependencies = 
    [   MemoryDep('div_19', c0, {c0: 256}),
        MemoryDep('mul_23', c0, {c0: 196608}),
        MemoryDep('primals_25', c1, {c0: 256, c1: 768})]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (196608, 1)
op261.sizes = ([256, 768], [])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_19_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf255_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op261_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_19', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_25', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf257', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_23', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf258', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf261', get_index_7, add, None)
        return store
op257_op258_op261_op262.snodes[3] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 196608})]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 196608})]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (196608, 1)
op262.sizes = ([196608], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf262_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op262_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf262', get_index_1, to_dtype, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op264.met_dependencies = [StarDep(name='permute_271', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op266: ExternKernelSchedulerNode(FallbackKernel)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op266.met_dependencies = 
    [   StarDep(name='getitem_53', mode=None),
        StarDep(name='getitem_54', mode=None),
        StarDep(name='getitem_59', mode=None),
        StarDep(name='getitem_60', mode=None),
        StarDep(name='permute_25', mode=None),
        StarDep(name='permute_26', mode=None),
        StarDep(name='permute_27', mode=None)]
op266.outputs = [
    buf266: FallbackKernel
    buf266.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op266.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 768})]
op260.unmet_dependencies = [MemoryDep('buf259', c0 + 768*c1, {c0: 768, c1: 2})]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf260.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (768, 2)
op260.sizes = ([768], [2])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op260_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf260', get_index_1, reduction)
        return store_reduction


op267: ExternKernelSchedulerNode(MultiOutput)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: MultiOutput
    buf267.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = None


op268: ExternKernelSchedulerNode(MultiOutput)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: MultiOutput
    buf268.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = None


op269: ExternKernelSchedulerNode(MultiOutput)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: MultiOutput
    buf269.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = None


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 589824})]
op270.unmet_dependencies = 
    [   MemoryDep('buf267', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf268', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf269', 768*c0 + (I), {c0: 256, c1: 2304})]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf270.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (589824, 1)
op270.sizes = ([256, 2304], [])
buf267_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf268_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf269_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf270_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op270_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf270', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf267', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf268', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf269', get_index)
        return load


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op272.met_dependencies = [StarDep(name='permute_279', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.mm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 1536})]
op276.unmet_dependencies = [MemoryDep('buf272', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op276.met_dependencies = [MemoryDep('mul_21', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (1536, 128)
op276.sizes = ([2, 768], [128])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_21', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_2, reduction)
        return store_reduction


op274_op275_op278_op279: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op274_op275_op278_op279.writes = 
    [   MemoryDep('buf274', c0, {c0: 256}),
        MemoryDep('buf275', c0, {c0: 256}),
        MemoryDep('buf278', c0, {c0: 196608}),
        MemoryDep('buf279', c0, {c0: 196608})]
op274_op275_op278_op279.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 196608}), MemoryDep('buf272', c0, {c0: 196608})]
op274_op275_op278_op279.met_dependencies = 
    [   MemoryDep('div_20', c0, {c0: 256}),
        MemoryDep('mul_21', c0, {c0: 196608}),
        MemoryDep('primals_22', c1, {c0: 256, c1: 768})]
op274_op275_op278_op279.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf274.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op274_op275_op278_op279.snodes[0] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 256})]
op274.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 196608})]
op274.met_dependencies = [MemoryDep('primals_22', c1, {c0: 256, c1: 768})]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf274.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (256, 768)
op274.sizes = ([256], [768])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op274_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf274', get_index_2, reduction)
        return store_reduction
op274_op275_op278_op279.snodes[1] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 256})]
op275.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 196608})]
op275.met_dependencies = 
    [   MemoryDep('mul_21', c0, {c0: 196608}),
        MemoryDep('primals_22', c1, {c0: 256, c1: 768})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (256, 768)
op275.sizes = ([256], [768])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op275_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_22', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_21', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, reduction)
        return store_reduction
op274_op275_op278_op279.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 196608})]
op278.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 196608}),
        MemoryDep('buf272', c0, {c0: 196608}),
        MemoryDep('buf274', c0, {c0: 256}),
        MemoryDep('buf275', c0, {c0: 256})]
op278.met_dependencies = 
    [   MemoryDep('div_20', c0, {c0: 256}),
        MemoryDep('mul_21', c0, {c0: 196608}),
        MemoryDep('primals_22', c1, {c0: 256, c1: 768})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (196608, 1)
op278.sizes = ([256, 768], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_20_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf272_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op278_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_20', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_22', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf274', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_21', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf275', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add, None)
        return store
op274_op275_op278_op279.snodes[3] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 196608})]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 196608})]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (196608, 1)
op279.sizes = ([196608], [])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf279_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op279_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf279', get_index_1, to_dtype, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op281.met_dependencies = [StarDep(name='permute_283', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 786432})]
op283.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 786432})]
op283.met_dependencies = [MemoryDep('mm_10', c0, {c0: 786432})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (786432, 1)
op283.sizes = ([786432], [])
buf281_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_10_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf283_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op283_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_10', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_10', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_10', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_10', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf283', get_index_5, to_dtype_5, None)
        return store


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op285.met_dependencies = [StarDep(name='permute_287', mode=None)]
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op285.node.kernel = extern_kernels.mm


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 768})]
op277.unmet_dependencies = [MemoryDep('buf276', c0 + 768*c1, {c0: 768, c1: 2})]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf277.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (768, 2)
op277.sizes = ([768], [2])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op277_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, reduction)
        return store_reduction


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 1536})]
op289.unmet_dependencies = [MemoryDep('buf285', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op289.met_dependencies = [MemoryDep('mul_16', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (1536, 128)
op289.sizes = ([2, 768], [128])
buf285_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op289_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_16', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf289', get_index_2, reduction)
        return store_reduction


op287_op288_op291_op292: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op287_op288_op291_op292.writes = 
    [   MemoryDep('buf287', c0, {c0: 256}),
        MemoryDep('buf288', c0, {c0: 256}),
        MemoryDep('buf291', c0, {c0: 196608}),
        MemoryDep('buf292', c0, {c0: 196608})]
op287_op288_op291_op292.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 196608}), MemoryDep('buf285', c0, {c0: 196608})]
op287_op288_op291_op292.met_dependencies = 
    [   MemoryDep('div_21', c0, {c0: 256}),
        MemoryDep('mul_16', c0, {c0: 196608}),
        MemoryDep('primals_19', c1, {c0: 256, c1: 768})]
op287_op288_op291_op292.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf287.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
    ]
]
op287_op288_op291_op292.snodes[0] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 256})]
op287.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 196608})]
op287.met_dependencies = [MemoryDep('primals_19', c1, {c0: 256, c1: 768})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf287.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (256, 768)
op287.sizes = ([256], [768])
buf285_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op287_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_19', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf287', get_index_2, reduction)
        return store_reduction
op287_op288_op291_op292.snodes[1] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 256})]
op288.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 196608})]
op288.met_dependencies = 
    [   MemoryDep('mul_16', c0, {c0: 196608}),
        MemoryDep('primals_19', c1, {c0: 256, c1: 768})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (256, 768)
op288.sizes = ([256], [768])
buf285_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op288_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_19', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_16', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_3, reduction)
        return store_reduction
op287_op288_op291_op292.snodes[2] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 196608})]
op291.unmet_dependencies = 
    [   MemoryDep('buf278', c0, {c0: 196608}),
        MemoryDep('buf285', c0, {c0: 196608}),
        MemoryDep('buf287', c0, {c0: 256}),
        MemoryDep('buf288', c0, {c0: 256})]
op291.met_dependencies = 
    [   MemoryDep('div_21', c0, {c0: 256}),
        MemoryDep('mul_16', c0, {c0: 196608}),
        MemoryDep('primals_19', c1, {c0: 256, c1: 768})]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (196608, 1)
op291.sizes = ([256, 768], [])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_21_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf285_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_16_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op291_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_21', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_19', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf287', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_16', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf288', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf291', get_index_7, add, None)
        return store
op287_op288_op291_op292.snodes[3] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 196608})]
op292.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 196608})]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (196608, 1)
op292.sizes = ([196608], [])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf292_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op292_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf292', get_index_1, to_dtype, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op294.met_dependencies = [StarDep(name='permute_291', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op296: ExternKernelSchedulerNode(FallbackKernel)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op296.met_dependencies = 
    [   StarDep(name='getitem_37', mode=None),
        StarDep(name='getitem_38', mode=None),
        StarDep(name='getitem_43', mode=None),
        StarDep(name='getitem_44', mode=None),
        StarDep(name='permute_17', mode=None),
        StarDep(name='permute_18', mode=None),
        StarDep(name='permute_19', mode=None)]
op296.outputs = [
    buf296: FallbackKernel
    buf296.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
    ]
]
op296.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 768})]
op290.unmet_dependencies = [MemoryDep('buf289', c0 + 768*c1, {c0: 768, c1: 2})]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf290.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (768, 2)
op290.sizes = ([768], [2])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op290_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf290', get_index_1, reduction)
        return store_reduction


op297: ExternKernelSchedulerNode(MultiOutput)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: MultiOutput
    buf297.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = None


op298: ExternKernelSchedulerNode(MultiOutput)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: MultiOutput
    buf298.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op298.node.kernel = None


op299: ExternKernelSchedulerNode(MultiOutput)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: MultiOutput
    buf299.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.node.kernel = None


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 589824})]
op300.unmet_dependencies = 
    [   MemoryDep('buf297', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf298', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf299', 768*c0 + (I), {c0: 256, c1: 2304})]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf300.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (589824, 1)
op300.sizes = ([256, 2304], [])
buf297_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf298_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf300_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op300_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf300', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf297', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf298', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf299', get_index)
        return load


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf300', mode=None)]
op302.met_dependencies = [StarDep(name='permute_299', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
]
op302.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1536})]
op306.unmet_dependencies = [MemoryDep('buf302', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op306.met_dependencies = [MemoryDep('mul_14', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf306.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (1536, 128)
op306.sizes = ([2, 768], [128])
buf302_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op306_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_14', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf306', get_index_2, reduction)
        return store_reduction


op304_op305_op308_op309: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op304_op305_op308_op309.writes = 
    [   MemoryDep('buf304', c0, {c0: 256}),
        MemoryDep('buf305', c0, {c0: 256}),
        MemoryDep('buf308', c0, {c0: 196608}),
        MemoryDep('buf309', c0, {c0: 196608})]
op304_op305_op308_op309.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 196608}), MemoryDep('buf302', c0, {c0: 196608})]
op304_op305_op308_op309.met_dependencies = 
    [   MemoryDep('div_22', c0, {c0: 256}),
        MemoryDep('mul_14', c0, {c0: 196608}),
        MemoryDep('primals_16', c1, {c0: 256, c1: 768})]
op304_op305_op308_op309.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf304.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf305.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
    ]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf309.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
    ]
]
op304_op305_op308_op309.snodes[0] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 256})]
op304.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 196608})]
op304.met_dependencies = [MemoryDep('primals_16', c1, {c0: 256, c1: 768})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf304.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (256, 768)
op304.sizes = ([256], [768])
buf302_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op304_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf304', get_index_2, reduction)
        return store_reduction
op304_op305_op308_op309.snodes[1] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 256})]
op305.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 196608})]
op305.met_dependencies = 
    [   MemoryDep('mul_14', c0, {c0: 196608}),
        MemoryDep('primals_16', c1, {c0: 256, c1: 768})]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf305.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (256, 768)
op305.sizes = ([256], [768])
buf302_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op305_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_16', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_14', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf305', get_index_3, reduction)
        return store_reduction
op304_op305_op308_op309.snodes[2] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 196608})]
op308.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 196608}),
        MemoryDep('buf302', c0, {c0: 196608}),
        MemoryDep('buf304', c0, {c0: 256}),
        MemoryDep('buf305', c0, {c0: 256})]
op308.met_dependencies = 
    [   MemoryDep('div_22', c0, {c0: 256}),
        MemoryDep('mul_14', c0, {c0: 196608}),
        MemoryDep('primals_16', c1, {c0: 256, c1: 768})]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (196608, 1)
op308.sizes = ([256, 768], [])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_22_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf302_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_14_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op308_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_22', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf302', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_16', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf304', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_14', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf305', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf308', get_index_7, add, None)
        return store
op304_op305_op308_op309.snodes[3] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 196608})]
op309.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 196608})]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf309.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (196608, 1)
op309.sizes = ([196608], [])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf309_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op309_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf309', get_index_1, to_dtype, None)
        return store


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf309', mode=None)]
op311.met_dependencies = [StarDep(name='permute_303', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 786432})]
op313.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 786432})]
op313.met_dependencies = [MemoryDep('mm_6', c0, {c0: 786432})]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (786432, 1)
op313.sizes = ([786432], [])
buf311_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_6_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf313_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op313_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_6', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_6', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_6', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_6', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, to_dtype_5, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op315.met_dependencies = [StarDep(name='permute_307', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
    ]
]
op315.node.kernel = extern_kernels.mm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 768})]
op307.unmet_dependencies = [MemoryDep('buf306', c0 + 768*c1, {c0: 768, c1: 2})]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf307.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (768, 2)
op307.sizes = ([768], [2])
buf306_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf307_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op307_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf307', get_index_1, reduction)
        return store_reduction


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1536})]
op319.unmet_dependencies = [MemoryDep('buf315', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op319.met_dependencies = [MemoryDep('mul_9', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (1536, 128)
op319.sizes = ([2, 768], [128])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_9_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op319_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_9', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf319', get_index_2, reduction)
        return store_reduction


op317_op318_op321_op322: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op317_op318_op321_op322.writes = 
    [   MemoryDep('buf317', c0, {c0: 256}),
        MemoryDep('buf318', c0, {c0: 256}),
        MemoryDep('buf321', c0, {c0: 196608}),
        MemoryDep('buf322', c0, {c0: 196608})]
op317_op318_op321_op322.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 196608}), MemoryDep('buf315', c0, {c0: 196608})]
op317_op318_op321_op322.met_dependencies = 
    [   MemoryDep('div_23', c0, {c0: 256}),
        MemoryDep('mul_9', c0, {c0: 196608}),
        MemoryDep('primals_13', c1, {c0: 256, c1: 768})]
op317_op318_op321_op322.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf317.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
    ]
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf322.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op317_op318_op321_op322.snodes[0] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 256})]
op317.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 196608})]
op317.met_dependencies = [MemoryDep('primals_13', c1, {c0: 256, c1: 768})]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf317.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (256, 768)
op317.sizes = ([256], [768])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op317_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf317', get_index_2, reduction)
        return store_reduction
op317_op318_op321_op322.snodes[1] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 256})]
op318.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 196608})]
op318.met_dependencies = 
    [   MemoryDep('mul_9', c0, {c0: 196608}),
        MemoryDep('primals_13', c1, {c0: 256, c1: 768})]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (256, 768)
op318.sizes = ([256], [768])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_9_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op318_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_9', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf318', get_index_3, reduction)
        return store_reduction
op317_op318_op321_op322.snodes[2] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 196608})]
op321.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 196608}),
        MemoryDep('buf315', c0, {c0: 196608}),
        MemoryDep('buf317', c0, {c0: 256}),
        MemoryDep('buf318', c0, {c0: 256})]
op321.met_dependencies = 
    [   MemoryDep('div_23', c0, {c0: 256}),
        MemoryDep('mul_9', c0, {c0: 196608}),
        MemoryDep('primals_13', c1, {c0: 256, c1: 768})]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (196608, 1)
op321.sizes = ([256, 768], [])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_23_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf315_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_9_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op321_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_23', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf315', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_13', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf317', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_9', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf318', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf321', get_index_7, add, None)
        return store
op317_op318_op321_op322.snodes[3] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 196608})]
op322.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 196608})]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf322.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op322.group.device = cuda:0
op322.group.iteration = (196608, 1)
op322.sizes = ([196608], [])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf322_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op322_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, to_dtype, None)
        return store


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op324.met_dependencies = [StarDep(name='permute_311', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.node.kernel = extern_kernels.mm


op326: ExternKernelSchedulerNode(FallbackKernel)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op326.met_dependencies = 
    [   StarDep(name='getitem_21', mode=None),
        StarDep(name='getitem_22', mode=None),
        StarDep(name='getitem_27', mode=None),
        StarDep(name='getitem_28', mode=None),
        StarDep(name='permute_10', mode=None),
        StarDep(name='permute_11', mode=None),
        StarDep(name='permute_9', mode=None)]
op326.outputs = [
    buf326: FallbackKernel
    buf326.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
    ]
]
op326.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 768})]
op320.unmet_dependencies = [MemoryDep('buf319', c0 + 768*c1, {c0: 768, c1: 2})]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf320.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (768, 2)
op320.sizes = ([768], [2])
buf319_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf320_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op320_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf320', get_index_1, reduction)
        return store_reduction


op327: ExternKernelSchedulerNode(MultiOutput)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: MultiOutput
    buf327.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op327.node.kernel = None


op328: ExternKernelSchedulerNode(MultiOutput)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: MultiOutput
    buf328.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = None


op329: ExternKernelSchedulerNode(MultiOutput)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: MultiOutput
    buf329.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = None


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 589824})]
op330.unmet_dependencies = 
    [   MemoryDep('buf327', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf328', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf329', 768*c0 + (I), {c0: 256, c1: 2304})]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf330.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (589824, 1)
op330.sizes = ([256, 2304], [])
buf327_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf328_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf329_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf330_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op330_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf330', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf327', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf329', get_index)
        return load


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op332.met_dependencies = [StarDep(name='permute_319', mode=None)]
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.mm


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 1536})]
op336.unmet_dependencies = [MemoryDep('buf332', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op336.met_dependencies = [MemoryDep('mul_7', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (1536, 128)
op336.sizes = ([2, 768], [128])
buf332_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op336_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_7', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf336', get_index_2, reduction)
        return store_reduction


op334_op335_op338_op339: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op334_op335_op338_op339.writes = 
    [   MemoryDep('buf334', c0, {c0: 256}),
        MemoryDep('buf335', c0, {c0: 256}),
        MemoryDep('buf338', c0, {c0: 196608}),
        MemoryDep('buf339', c0, {c0: 196608})]
op334_op335_op338_op339.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 196608}), MemoryDep('buf332', c0, {c0: 196608})]
op334_op335_op338_op339.met_dependencies = 
    [   MemoryDep('div_24', c0, {c0: 256}),
        MemoryDep('mul_7', c0, {c0: 196608}),
        MemoryDep('primals_10', c1, {c0: 256, c1: 768})]
op334_op335_op338_op339.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf334.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf335.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op334_op335_op338_op339.snodes[0] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 256})]
op334.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 196608})]
op334.met_dependencies = [MemoryDep('primals_10', c1, {c0: 256, c1: 768})]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf334.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (256, 768)
op334.sizes = ([256], [768])
buf332_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op334_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf334', get_index_2, reduction)
        return store_reduction
op334_op335_op338_op339.snodes[1] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 256})]
op335.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 196608})]
op335.met_dependencies = 
    [   MemoryDep('mul_7', c0, {c0: 196608}),
        MemoryDep('primals_10', c1, {c0: 256, c1: 768})]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf335.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (256, 768)
op335.sizes = ([256], [768])
buf332_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op335_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_7', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf335', get_index_3, reduction)
        return store_reduction
op334_op335_op338_op339.snodes[2] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 196608})]
op338.unmet_dependencies = 
    [   MemoryDep('buf321', c0, {c0: 196608}),
        MemoryDep('buf332', c0, {c0: 196608}),
        MemoryDep('buf334', c0, {c0: 256}),
        MemoryDep('buf335', c0, {c0: 256})]
op338.met_dependencies = 
    [   MemoryDep('div_24', c0, {c0: 256}),
        MemoryDep('mul_7', c0, {c0: 196608}),
        MemoryDep('primals_10', c1, {c0: 256, c1: 768})]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (196608, 1)
op338.sizes = ([256, 768], [])
buf321_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_24_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf332_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_7_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op338_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_24', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf332', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_10', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf334', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_7', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf335', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf338', get_index_7, add, None)
        return store
op334_op335_op338_op339.snodes[3] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 196608})]
op339.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 196608})]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (196608, 1)
op339.sizes = ([196608], [])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf339_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op339_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf339', get_index_1, to_dtype, None)
        return store


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op341.met_dependencies = [StarDep(name='permute_323', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 786432})]
op343.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 786432})]
op343.met_dependencies = [MemoryDep('mm_2', c0, {c0: 786432})]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
    buf343.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (786432, 1)
op343.sizes = ([786432], [])
buf341_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
mm_2_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 3072], stride=[3072, 1])
buf343_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 3072], stride=[196608, 3072, 1])
class op343_loop_body:
    var_ranges = {p0: 786432}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mm_2', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mm_2', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('mm_2', get_index_3)
        to_dtype_3 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.bfloat16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('mm_2', get_index_4)
        to_dtype_4 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.bfloat16)
        mul_2 = ops.mul(to_dtype_3, to_dtype_4)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_2, mul_4)
        add_1 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_1)
        to_dtype_5 = ops.to_dtype(mul_6, torch.bfloat16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, to_dtype_5, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op345.met_dependencies = [StarDep(name='permute_327', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
]
op345.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 768})]
op337.unmet_dependencies = [MemoryDep('buf336', c0 + 768*c1, {c0: 768, c1: 2})]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf337.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (768, 2)
op337.sizes = ([768], [2])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf337_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op337_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf337', get_index_1, reduction)
        return store_reduction


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1536})]
op349.unmet_dependencies = [MemoryDep('buf345', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op349.met_dependencies = [MemoryDep('mul_2', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1536, 128)
op349.sizes = ([2, 768], [128])
buf345_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
mul_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op349_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('mul_2', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_2, reduction)
        return store_reduction


op347_op348_op351_op352: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op347_op348_op351_op352.writes = 
    [   MemoryDep('buf347', c0, {c0: 256}),
        MemoryDep('buf348', c0, {c0: 256}),
        MemoryDep('buf351', c0, {c0: 196608}),
        MemoryDep('buf352', c0, {c0: 196608})]
op347_op348_op351_op352.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 196608}), MemoryDep('buf345', c0, {c0: 196608})]
op347_op348_op351_op352.met_dependencies = 
    [   MemoryDep('div_25', c0, {c0: 256}),
        MemoryDep('mul_2', c0, {c0: 196608}),
        MemoryDep('primals_7', c1, {c0: 256, c1: 768})]
op347_op348_op351_op352.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf347.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf352.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
    ]
]
op347_op348_op351_op352.snodes[0] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 256})]
op347.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 196608})]
op347.met_dependencies = [MemoryDep('primals_7', c1, {c0: 256, c1: 768})]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf347.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (256, 768)
op347.sizes = ([256], [768])
buf345_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op347_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_7', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf347', get_index_2, reduction)
        return store_reduction
op347_op348_op351_op352.snodes[1] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 256})]
op348.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 196608})]
op348.met_dependencies = 
    [   MemoryDep('mul_2', c0, {c0: 196608}),
        MemoryDep('primals_7', c1, {c0: 256, c1: 768})]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (256, 768)
op348.sizes = ([256], [768])
buf345_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
mul_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op348_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_7', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('mul_2', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf348', get_index_3, reduction)
        return store_reduction
op347_op348_op351_op352.snodes[2] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 196608})]
op351.unmet_dependencies = 
    [   MemoryDep('buf338', c0, {c0: 196608}),
        MemoryDep('buf345', c0, {c0: 196608}),
        MemoryDep('buf347', c0, {c0: 256}),
        MemoryDep('buf348', c0, {c0: 256})]
op351.met_dependencies = 
    [   MemoryDep('div_25', c0, {c0: 256}),
        MemoryDep('mul_2', c0, {c0: 196608}),
        MemoryDep('primals_7', c1, {c0: 256, c1: 768})]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op351.group.device = cuda:0
op351.group.iteration = (196608, 1)
op351.sizes = ([256, 768], [])
buf338_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
div_25_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf345_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf347_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
mul_2_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf348_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op351_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('div_25', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf345', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_7', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        constant = ops.constant(768.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf347', get_index_4)
        sub = ops.sub(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('mul_2', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf348', get_index_6)
        mul_2 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_2)
        mul_3 = ops.mul(load_1, sub_1)
        add = ops.add(load, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf351', get_index_7, add, None)
        return store
op347_op348_op351_op352.snodes[3] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 196608})]
op352.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 196608})]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf352.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (196608, 1)
op352.sizes = ([196608], [])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf352_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
class op352_loop_body:
    var_ranges = {p0: 196608}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf352', get_index_1, to_dtype, None)
        return store


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op354.met_dependencies = [StarDep(name='permute_331', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354.node.kernel = extern_kernels.mm


op356: ExternKernelSchedulerNode(FallbackKernel)
op356.writes = [StarDep(name='buf356', mode=None)]
op356.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op356.met_dependencies = 
    [   StarDep(name='getitem_11', mode=None),
        StarDep(name='getitem_12', mode=None),
        StarDep(name='getitem_5', mode=None),
        StarDep(name='getitem_6', mode=None),
        StarDep(name='permute_1', mode=None),
        StarDep(name='permute_2', mode=None),
        StarDep(name='permute_3', mode=None)]
op356.outputs = [
    buf356: FallbackKernel
    buf356.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
    ]
]
op356.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 768})]
op350.unmet_dependencies = [MemoryDep('buf349', c0 + 768*c1, {c0: 768, c1: 2})]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf350.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (768, 2)
op350.sizes = ([768], [2])
buf349_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf350_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op350_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf350', get_index_1, reduction)
        return store_reduction


op357: ExternKernelSchedulerNode(MultiOutput)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: MultiOutput
    buf357.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf357.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op357.node.kernel = None


op358: ExternKernelSchedulerNode(MultiOutput)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: MultiOutput
    buf358.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.node.kernel = None


op359: ExternKernelSchedulerNode(MultiOutput)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: MultiOutput
    buf359.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.node.kernel = None


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 589824})]
op360.unmet_dependencies = 
    [   MemoryDep('buf357', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf358', 768*c0 + (I), {c0: 256, c1: 2304}),
        MemoryDep('buf359', 768*c0 + (I), {c0: 256, c1: 2304})]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
    buf360.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
    ]
]
op360.group.device = cuda:0
op360.group.iteration = (589824, 1)
op360.sizes = ([256, 2304], [])
buf357_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf358_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf359_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 12, 64, 64], stride=[49152, 64, 768, 1])
buf360_layout = FixedLayout('cuda:0', torch.bfloat16, size=[4, 64, 2304], stride=[147456, 2304, 1])
class op360_loop_body:
    var_ranges = {p0: 256, p1: 2304}
    index0 = p1
    index1 = 768*p0 + (I)
    index2 = 768*p0 + (I)
    index3 = 768*p0 + (I)
    index4 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(768, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(768, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1536, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1536, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2304, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf360', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf357', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf359', get_index)
        return load


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op362.met_dependencies = [StarDep(name='permute_339', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
    buf362.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op362.node.kernel = extern_kernels.mm


op364_op365_op368_op372: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op364_op365_op368_op372.writes = 
    [   MemoryDep('buf364', c0, {c0: 256}),
        MemoryDep('buf365', c0, {c0: 256}),
        MemoryDep('buf368', c0, {c0: 196608}),
        MemoryDep('buf372', c1 + 768*tmp0, {c0: 256, c1: 768}, atomic_add)]
op364_op365_op368_op372.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 196608}),
        MemoryDep('buf362', c0, {c0: 196608}),
        StarDep(name='buf371', mode='atomic_add')]
op364_op365_op368_op372.met_dependencies = 
    [   MemoryDep('embedding', c0, {c0: 196608}),
        MemoryDep('embedding_1', c1, {c0: 4, c1: 49152}),
        MemoryDep('getitem_1', c0, {c0: 256}),
        MemoryDep('primals_1', c0, {c0: 256}),
        MemoryDep('primals_4', c1, {c0: 256, c1: 768}),
        MemoryDep('rsqrt', c0, {c0: 256})]
op364_op365_op368_op372.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf364.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf365.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
    buf372: ComputedBuffer
    buf372.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
    buf372.mutations = ['buf371']
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op364_op365_op368_op372.snodes[0] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 256})]
op364.unmet_dependencies = [MemoryDep('buf362', c0, {c0: 196608})]
op364.met_dependencies = [MemoryDep('primals_4', c1, {c0: 256, c1: 768})]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf364.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (256, 768)
op364.sizes = ([256], [768])
buf362_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op364_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf364', get_index_2, reduction)
        return store_reduction
op364_op365_op368_op372.snodes[1] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 256})]
op365.unmet_dependencies = [MemoryDep('buf362', c0, {c0: 196608})]
op365.met_dependencies = 
    [   MemoryDep('embedding', c0, {c0: 196608}),
        MemoryDep('embedding_1', c1, {c0: 4, c1: 49152}),
        MemoryDep('getitem_1', c0, {c0: 256}),
        MemoryDep('primals_4', c1, {c0: 256, c1: 768}),
        MemoryDep('rsqrt', c0, {c0: 256})]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
    buf365.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (256, 768)
op365.sizes = ([4, 64], [768])
buf362_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
embedding_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
embedding_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
class op365_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('embedding', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('embedding_1', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('getitem_1', get_index_4)
        sub = ops.sub(add, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('rsqrt', get_index_5)
        mul_1 = ops.mul(sub, load_5)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf365', get_index_6, reduction)
        return store_reduction
op364_op365_op368_op372.snodes[2] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 196608})]
op368.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 196608}),
        MemoryDep('buf362', c0, {c0: 196608}),
        MemoryDep('buf364', c0, {c0: 256}),
        MemoryDep('buf365', c0, {c0: 256})]
op368.met_dependencies = 
    [   MemoryDep('embedding', c0, {c0: 196608}),
        MemoryDep('embedding_1', c1, {c0: 4, c1: 49152}),
        MemoryDep('getitem_1', c0, {c0: 256}),
        MemoryDep('primals_4', c1, {c0: 256, c1: 768}),
        MemoryDep('rsqrt', c0, {c0: 256})]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (196608, 1)
op368.sizes = ([4, 64, 768], [])
buf351_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf362_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf364_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
embedding_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
embedding_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf365_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 256])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
class op368_loop_body:
    var_ranges = {p0: 4, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = 64*p0 + p1
    index2 = p2
    index3 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('rsqrt', get_index_1)
        constant = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf362', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_4', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_1 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf364', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('embedding', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('embedding_1', get_index_6)
        add = ops.add(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('getitem_1', get_index_7)
        sub_1 = ops.sub(add, load_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('rsqrt', get_index_8)
        mul_3 = ops.mul(sub_1, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf365', get_index_9)
        mul_4 = ops.mul(mul_3, load_9)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_1 = ops.add(load, mul_5)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf368', get_index_10, add_1, None)
        return store
op364_op365_op368_op372.snodes[3] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c1 + 768*tmp0, {c0: 256, c1: 768}, atomic_add)]
op372.unmet_dependencies = 
    [   MemoryDep('buf368', c0, {c0: 196608}),
        StarDep(name='buf371', mode='atomic_add')]
op372.met_dependencies = [MemoryDep('primals_1', c0, {c0: 256})]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
    buf372.mutations = ['buf371']
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (196608, 1)
op372.sizes = ([256, 768], [])
primals_1_layout = FixedLayout('cuda:0', torch.int64, size=[4, 64], stride=[64, 1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf371_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
buf372_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
class op372_loop_body:
    var_ranges = {p0: 256, p1: 768}
    index0 = p0
    index1 = 768*p0 + p1
    index2 = 768*indirect0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_1', get_index_1)
        constant = ops.constant(-1, torch.int64)
        eq = ops.eq(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf368', get_index_2)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, constant_1, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf372', get_index_3, where, 'atomic_add')
        return store


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 1536})]
op366.unmet_dependencies = [MemoryDep('buf362', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128})]
op366.met_dependencies = 
    [   MemoryDep('embedding', 98304*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 128}),
        MemoryDep('embedding_1', c1 + 768*(ModularIndexing(c2, 1, 64)), {c0: 2, c1: 768, c2: 128}),
        MemoryDep('getitem_1', 128*c0 + c2, {c0: 2, c1: 768, c2: 128}),
        MemoryDep('rsqrt', 128*c0 + c2, {c0: 2, c1: 768, c2: 128})]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (1536, 128)
op366.sizes = ([2, 768], [128])
buf362_layout = FixedLayout('cuda:0', torch.bfloat16, size=[256, 768], stride=[768, 1])
embedding_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
embedding_1_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
getitem_1_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
rsqrt_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 1], stride=[64, 1, 1])
buf366_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
class op366_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 128}
    index0 = 98304*p0 + p1 + 768*p2
    index1 = p1 + 768*(ModularIndexing(p2, 1, 64))
    index2 = 128*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('embedding', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('embedding_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('getitem_1', get_index_3)
        sub = ops.sub(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('rsqrt', get_index_4)
        mul = ops.mul(sub, load_4)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf366', get_index_5, reduction)
        return store_reduction


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c1 + 768*tmp0, {c0: 64, c1: 768}, atomic_add)]
op370.unmet_dependencies = 
    [   MemoryDep('buf368', c0 + 147456, {c0: 49152}),
        MemoryDep('buf368', c0 + 49152, {c0: 49152}),
        MemoryDep('buf368', c0 + 98304, {c0: 49152}),
        MemoryDep('buf368', c0, {c0: 49152}),
        StarDep(name='buf369', mode='atomic_add')]
op370.met_dependencies = [MemoryDep('iota', c0, {c0: 64})]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
    buf370.mutations = ['buf369']
    buf370.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (49152, 1)
op370.sizes = ([64, 768], [])
iota_layout = FixedLayout('cuda:0', torch.int64, size=[64], stride=[1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[4, 64, 768], stride=[49152, 768, 1])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
buf370_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[64, 768], stride=[768, 1])
class op370_loop_body:
    var_ranges = {p0: 64, p1: 768}
    index0 = p0
    index1 = 768*p0 + p1
    index2 = 768*p0 + p1 + 49152
    index3 = 768*p0 + p1 + 98304
    index4 = 768*p0 + p1 + 147456
    index5 = 768*indirect0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('iota', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('iota', get_index_1)
        constant = ops.constant(-1, torch.int64)
        eq = ops.eq(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf368', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf368', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf368', get_index_4)
        add_1 = ops.add(add, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf368', get_index_5)
        add_2 = ops.add(add_1, load_5)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, constant_1, add_2)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf370', get_index_6, where, 'atomic_add')
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 49920})]
op373.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 49920}), MemoryDep('buf372', c0, {c0: 49920})]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
    buf373.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (49920, 1)
op373.sizes = ([49920], [])
buf2_layout = FixedLayout('cuda:0', torch.bfloat16, size=[65, 768], stride=[768, 1])
buf372_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[65, 768], stride=[768, 1])
class op373_loop_body:
    var_ranges = {p0: 49920}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf371', get_index_1)
        add = ops.add(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf373', get_index_2, add, None)
        return store


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 768})]
op367.unmet_dependencies = [MemoryDep('buf366', c0 + 768*c1, {c0: 768, c1: 2})]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf367.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (768, 2)
op367.sizes = ([768], [2])
buf366_layout = FixedLayout('cuda:0', torch.float32, size=[768, 2], stride=[1, 768])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op367_loop_body:
    var_ranges = {p0: 768, p1: 2}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf367', get_index_1, reduction)
        return store_reduction


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='getitem_181', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='getitem_165', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='getitem_149', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='getitem_133', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='getitem_117', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='getitem_101', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='getitem_85', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='getitem_69', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='getitem_53', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.mm


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='getitem_37', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.mm


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='getitem_21', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op323.node.kernel = extern_kernels.mm


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='getitem_5', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 589824})]
op25.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 589824})]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf25.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (589824, 1)
op25.sizes = ([589824], [])
buf23_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op25_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf25', get_index_1, to_dtype, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 589824})]
op55.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 589824})]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf55.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (589824, 1)
op55.sizes = ([589824], [])
buf53_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op55_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf55', get_index_1, to_dtype, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 589824})]
op85.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 589824})]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf85.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (589824, 1)
op85.sizes = ([589824], [])
buf83_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op85_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf85', get_index_1, to_dtype, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 589824})]
op115.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 589824})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf115.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (589824, 1)
op115.sizes = ([589824], [])
buf113_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op115_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf115', get_index_1, to_dtype, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 589824})]
op145.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 589824})]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf145.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (589824, 1)
op145.sizes = ([589824], [])
buf143_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op145_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf145', get_index_1, to_dtype, None)
        return store


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 589824})]
op175.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 589824})]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (589824, 1)
op175.sizes = ([589824], [])
buf173_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op175_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, to_dtype, None)
        return store


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 589824})]
op205.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 589824})]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (589824, 1)
op205.sizes = ([589824], [])
buf203_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op205_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf205', get_index_1, to_dtype, None)
        return store


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 589824})]
op235.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 589824})]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf235.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (589824, 1)
op235.sizes = ([589824], [])
buf233_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op235_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf235', get_index_1, to_dtype, None)
        return store


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 589824})]
op265.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 589824})]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf265.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (589824, 1)
op265.sizes = ([589824], [])
buf263_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op265_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf265', get_index_1, to_dtype, None)
        return store


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 589824})]
op295.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 589824})]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf295.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (589824, 1)
op295.sizes = ([589824], [])
buf293_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op295_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf295', get_index_1, to_dtype, None)
        return store


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 589824})]
op325.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 589824})]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf325.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (589824, 1)
op325.sizes = ([589824], [])
buf323_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op325_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, to_dtype, None)
        return store


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 589824})]
op355.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 589824})]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf355.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (589824, 1)
op355.sizes = ([589824], [])
buf353_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 768], stride=[768, 1])
buf355_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op355_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf355', get_index_1, to_dtype, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='view_132', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='view_120', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='view_108', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='view_96', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.mm


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = [StarDep(name='view_84', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='view_72', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='view_60', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='view_48', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='view_36', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf300', mode=None)]
op301.met_dependencies = [StarDep(name='view_24', mode=None)]
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.mm


op331: ExternKernelSchedulerNode(ExternKernelOut)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='view_12', mode=None)]
op331.outputs = [
    buf331: ExternKernelOut
    buf331.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.mm


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='view', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.mm


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='view_142', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.mm


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='view_140', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.mm


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='view_130', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='view_128', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='view_118', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.mm


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='view_116', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='view_106', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='view_104', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='view_94', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='view_92', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='view_82', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.mm


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='view_80', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='view_70', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.mm


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='view_68', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.mm


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='view_58', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='view_56', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op224.node.kernel = extern_kernels.mm


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='view_46', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='view_44', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='view_34', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='view_32', mode=None)]
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.mm


op310: ExternKernelSchedulerNode(ExternKernelOut)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf309', mode=None)]
op310.met_dependencies = [StarDep(name='view_22', mode=None)]
op310.outputs = [
    buf310: ExternKernelOut
    buf310.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf310.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op310.node.kernel = extern_kernels.mm


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='view_20', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='view_10', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='view_8', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op344.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1769472})]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 1769472})]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf33.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1769472, 1)
op33.sizes = ([1769472], [])
buf31_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op33_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf33', get_index_1, to_dtype, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1769472})]
op63.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 1769472})]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf63.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1769472, 1)
op63.sizes = ([1769472], [])
buf61_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op63_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf63', get_index_1, to_dtype, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1769472})]
op93.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 1769472})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf93.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1769472, 1)
op93.sizes = ([1769472], [])
buf91_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op93_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf93', get_index_1, to_dtype, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 1769472})]
op123.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 1769472})]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf123.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (1769472, 1)
op123.sizes = ([1769472], [])
buf121_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op123_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf123', get_index_1, to_dtype, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1769472})]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 1769472})]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf153.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1769472, 1)
op153.sizes = ([1769472], [])
buf151_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op153_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf153', get_index_1, to_dtype, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 1769472})]
op183.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 1769472})]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf183.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (1769472, 1)
op183.sizes = ([1769472], [])
buf181_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op183_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf183', get_index_1, to_dtype, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1769472})]
op213.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 1769472})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf213.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (1769472, 1)
op213.sizes = ([1769472], [])
buf211_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op213_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf213', get_index_1, to_dtype, None)
        return store


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 1769472})]
op243.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 1769472})]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf243.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (1769472, 1)
op243.sizes = ([1769472], [])
buf241_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op243_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf243', get_index_1, to_dtype, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 1769472})]
op273.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 1769472})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf273.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (1769472, 1)
op273.sizes = ([1769472], [])
buf271_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op273_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf273', get_index_1, to_dtype, None)
        return store


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 1769472})]
op303.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 1769472})]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf303.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (1769472, 1)
op303.sizes = ([1769472], [])
buf301_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op303_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf303', get_index_1, to_dtype, None)
        return store


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1769472})]
op333.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 1769472})]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf333.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1769472, 1)
op333.sizes = ([1769472], [])
buf331_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op333_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf333', get_index_1, to_dtype, None)
        return store


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1769472})]
op363.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 1769472})]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf363.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (1769472, 1)
op363.sizes = ([1769472], [])
buf361_layout = FixedLayout('cuda:0', torch.bfloat16, size=[2304, 768], stride=[768, 1])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op363_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf363', get_index_1, to_dtype, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2359296})]
op12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2359296})]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf12.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (2359296, 1)
op12.sizes = ([2359296], [])
buf10_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op12_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf12', get_index_1, to_dtype, None)
        return store


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 2359296})]
op16.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2359296})]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf16.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (2359296, 1)
op16.sizes = ([2359296], [])
buf14_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op16_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf16', get_index_1, to_dtype, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2359296})]
op42.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2359296})]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf42.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (2359296, 1)
op42.sizes = ([2359296], [])
buf40_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op42_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf42', get_index_1, to_dtype, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 2359296})]
op46.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 2359296})]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf46.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (2359296, 1)
op46.sizes = ([2359296], [])
buf44_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op46_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf46', get_index_1, to_dtype, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 2359296})]
op72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 2359296})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf72.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (2359296, 1)
op72.sizes = ([2359296], [])
buf70_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op72_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf72', get_index_1, to_dtype, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 2359296})]
op76.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 2359296})]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf76.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (2359296, 1)
op76.sizes = ([2359296], [])
buf74_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op76_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf76', get_index_1, to_dtype, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 2359296})]
op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 2359296})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf102.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (2359296, 1)
op102.sizes = ([2359296], [])
buf100_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op102_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf102', get_index_1, to_dtype, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 2359296})]
op106.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2359296})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf106.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (2359296, 1)
op106.sizes = ([2359296], [])
buf104_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op106_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf106', get_index_1, to_dtype, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 2359296})]
op132.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 2359296})]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf132.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (2359296, 1)
op132.sizes = ([2359296], [])
buf130_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op132_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf132', get_index_1, to_dtype, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 2359296})]
op136.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 2359296})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf136.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (2359296, 1)
op136.sizes = ([2359296], [])
buf134_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op136_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf136', get_index_1, to_dtype, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 2359296})]
op162.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 2359296})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf162.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (2359296, 1)
op162.sizes = ([2359296], [])
buf160_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op162_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, to_dtype, None)
        return store


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 2359296})]
op166.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 2359296})]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf166.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (2359296, 1)
op166.sizes = ([2359296], [])
buf164_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op166_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf166', get_index_1, to_dtype, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 2359296})]
op192.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 2359296})]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf192.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (2359296, 1)
op192.sizes = ([2359296], [])
buf190_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op192_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf192', get_index_1, to_dtype, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 2359296})]
op196.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 2359296})]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf196.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (2359296, 1)
op196.sizes = ([2359296], [])
buf194_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op196_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, to_dtype, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 2359296})]
op222.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 2359296})]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf222.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (2359296, 1)
op222.sizes = ([2359296], [])
buf220_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op222_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf222', get_index_1, to_dtype, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 2359296})]
op226.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 2359296})]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf226.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (2359296, 1)
op226.sizes = ([2359296], [])
buf224_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op226_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf226', get_index_1, to_dtype, None)
        return store


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 2359296})]
op252.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 2359296})]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf252.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (2359296, 1)
op252.sizes = ([2359296], [])
buf250_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op252_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf252', get_index_1, to_dtype, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 2359296})]
op256.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 2359296})]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf256.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (2359296, 1)
op256.sizes = ([2359296], [])
buf254_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op256_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf256', get_index_1, to_dtype, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2359296})]
op282.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 2359296})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf282.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2359296, 1)
op282.sizes = ([2359296], [])
buf280_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op282_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf282', get_index_1, to_dtype, None)
        return store


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 2359296})]
op286.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 2359296})]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf286.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (2359296, 1)
op286.sizes = ([2359296], [])
buf284_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op286_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, to_dtype, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 2359296})]
op312.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 2359296})]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf312.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (2359296, 1)
op312.sizes = ([2359296], [])
buf310_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf312_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op312_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, to_dtype, None)
        return store


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 2359296})]
op316.unmet_dependencies = [MemoryDep('buf314', c0, {c0: 2359296})]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf316.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (2359296, 1)
op316.sizes = ([2359296], [])
buf314_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op316_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf316', get_index_1, to_dtype, None)
        return store


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 2359296})]
op342.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 2359296})]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
    buf342.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (2359296, 1)
op342.sizes = ([2359296], [])
buf340_layout = FixedLayout('cuda:0', torch.bfloat16, size=[768, 3072], stride=[3072, 1])
buf342_layout = FixedLayout('cuda:0', torch.float32, size=[768, 3072], stride=[3072, 1])
class op342_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf342', get_index_1, to_dtype, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 2359296})]
op346.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 2359296})]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
    buf346.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (2359296, 1)
op346.sizes = ([2359296], [])
buf344_layout = FixedLayout('cuda:0', torch.bfloat16, size=[3072, 768], stride=[768, 1])
buf346_layout = FixedLayout('cuda:0', torch.float32, size=[3072, 768], stride=[768, 1])
class op346_loop_body:
    var_ranges = {p0: 2359296}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf346', get_index_1, to_dtype, None)
        return store


